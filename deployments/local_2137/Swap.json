{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.15\"},\"sources\":{\"contracts/actions/common/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { IERC20 } from \\\"../../interfaces/tokens/IERC20.sol\\\";\\nimport { SafeMath } from \\\"../../libs/SafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\nimport { ONE_INCH_AGGREGATOR } from \\\"../../core/constants/Common.sol\\\";\\nimport { SwapData } from \\\"../../core/types/Common.sol\\\";\\n\\ncontract Swap {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  address public feeBeneficiaryAddress;\\n  uint256 public constant feeBase = 10000;\\n  mapping(uint256 => bool) public feeTiers;\\n  mapping(address => bool) public authorizedAddresses;\\n  ServiceRegistry internal immutable registry;\\n\\n  error ReceivedLess(uint256 receiveAtLeast, uint256 received);\\n  error Unauthorized();\\n  error FeeTierDoesNotExist(uint256 fee);\\n  error FeeTierAlreadyExists(uint256 fee);\\n  error SwapFailed();\\n\\n  constructor(\\n    address authorisedCaller,\\n    address feeBeneficiary,\\n    uint256 _initialFee,\\n    address _registry\\n  ) {\\n    authorizedAddresses[authorisedCaller] = true;\\n    authorizedAddresses[feeBeneficiary] = true;\\n    _addFeeTier(_initialFee);\\n    feeBeneficiaryAddress = feeBeneficiary;\\n    registry = ServiceRegistry(_registry);\\n  }\\n\\n  event AssetSwap(\\n    address indexed assetIn,\\n    address indexed assetOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  event FeePaid(address indexed beneficiary, uint256 amount, address token);\\n  event SlippageSaved(uint256 minimumPossible, uint256 actualAmount);\\n  event FeeTierAdded(uint256 fee);\\n  event FeeTierRemoved(uint256 fee);\\n\\n  modifier onlyAuthorised() {\\n    if (!authorizedAddresses[msg.sender]) {\\n      revert Unauthorized();\\n    }\\n    _;\\n  }\\n\\n  function _addFeeTier(uint256 fee) private {\\n    if (feeTiers[fee]) {\\n      revert FeeTierAlreadyExists(fee);\\n    }\\n    feeTiers[fee] = true;\\n    emit FeeTierAdded(fee);\\n  }\\n\\n  function addFeeTier(uint256 fee) public onlyAuthorised {\\n    _addFeeTier(fee);\\n  }\\n\\n  function removeFeeTier(uint256 fee) public onlyAuthorised {\\n    if (!feeTiers[fee]) {\\n      revert FeeTierDoesNotExist(fee);\\n    }\\n    feeTiers[fee] = false;\\n    emit FeeTierRemoved(fee);\\n  }\\n\\n  function verifyFee(uint256 feeId) public view returns (bool valid) {\\n    valid = feeTiers[feeId];\\n  }\\n\\n  function _swap(\\n    address fromAsset,\\n    address toAsset,\\n    uint256 amount,\\n    uint256 receiveAtLeast,\\n    address callee,\\n    bytes calldata withData\\n  ) internal returns (uint256 balance) {\\n    IERC20(fromAsset).safeApprove(callee, amount);\\n\\n    (bool success, ) = callee.call(withData);\\n\\n    if (!success) {\\n      revert SwapFailed();\\n    }\\n\\n    balance = IERC20(toAsset).balanceOf(address(this));\\n\\n    emit SlippageSaved(receiveAtLeast, balance);\\n\\n    if (balance < receiveAtLeast) {\\n      revert ReceivedLess(receiveAtLeast, balance);\\n    }\\n    emit SlippageSaved(receiveAtLeast, balance);\\n    emit AssetSwap(fromAsset, toAsset, amount, balance);\\n  }\\n\\n  function _collectFee(\\n    address asset,\\n    uint256 fromAmount,\\n    uint256 fee\\n  ) internal returns (uint256 amount) {\\n    bool isFeeValid = verifyFee(fee);\\n    if (!isFeeValid) {\\n      revert FeeTierDoesNotExist(fee);\\n    }\\n\\n    uint256 feeToTransfer = fromAmount.mul(fee).div(fee.add(feeBase));\\n\\n    if (fee > 0) {\\n      IERC20(asset).safeTransfer(feeBeneficiaryAddress, feeToTransfer);\\n      emit FeePaid(feeBeneficiaryAddress, feeToTransfer, asset);\\n    }\\n\\n    amount = fromAmount.sub(feeToTransfer);\\n  }\\n\\n  function swapTokens(SwapData calldata swapData) public returns (uint256) {\\n    IERC20(swapData.fromAsset).safeTransferFrom(msg.sender, address(this), swapData.amount);\\n\\n    uint256 amountFrom = swapData.amount;\\n\\n    if (swapData.collectFeeInFromToken) {\\n      amountFrom = _collectFee(swapData.fromAsset, swapData.amount, swapData.fee);\\n    }\\n\\n    address oneInch = registry.getRegisteredService(ONE_INCH_AGGREGATOR);\\n\\n    uint256 toTokenBalance = _swap(\\n      swapData.fromAsset,\\n      swapData.toAsset,\\n      amountFrom,\\n      swapData.receiveAtLeast,\\n      oneInch,\\n      swapData.withData\\n    );\\n\\n    if (!swapData.collectFeeInFromToken) {\\n      toTokenBalance = _collectFee(swapData.toAsset, toTokenBalance, swapData.fee);\\n    }\\n\\n    uint256 fromTokenBalance = IERC20(swapData.fromAsset).balanceOf(address(this));\\n    if (fromTokenBalance > 0) {\\n      IERC20(swapData.fromAsset).safeTransfer(msg.sender, fromTokenBalance);\\n    }\\n\\n    IERC20(swapData.toAsset).safeTransfer(msg.sender, toTokenBalance);\\n    return toTokenBalance;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/ServiceRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.1;\\n\\n/**\\n * @title Service Registry\\n * @notice Stores addresses of deployed contracts\\n */\\ncontract ServiceRegistry {\\n  uint256 public constant MAX_DELAY = 30 days;\\n\\n  mapping(bytes32 => uint256) public lastExecuted;\\n  mapping(bytes32 => address) private namedService;\\n  address public owner;\\n  uint256 public requiredDelay;\\n\\n  modifier validateInput(uint256 len) {\\n    require(msg.data.length == len, \\\"registry/illegal-padding\\\");\\n    _;\\n  }\\n\\n  modifier delayedExecution() {\\n    bytes32 operationHash = keccak256(msg.data);\\n    uint256 reqDelay = requiredDelay;\\n\\n    /* solhint-disable not-rely-on-time */\\n    if (lastExecuted[operationHash] == 0 && reqDelay > 0) {\\n      // not called before, scheduled for execution\\n      lastExecuted[operationHash] = block.timestamp;\\n      emit ChangeScheduled(operationHash, block.timestamp + reqDelay, msg.data);\\n    } else {\\n      require(block.timestamp - reqDelay > lastExecuted[operationHash], \\\"registry/delay-too-small\\\");\\n      emit ChangeApplied(operationHash, block.timestamp, msg.data);\\n      _;\\n      lastExecuted[operationHash] = 0;\\n    }\\n    /* solhint-enable not-rely-on-time */\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"registry/only-owner\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 initialDelay) {\\n    require(initialDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = initialDelay;\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @param newOwner Transfers ownership of the registry to a new address\\n   */\\n  function transferOwnership(address newOwner)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n    delayedExecution\\n  {\\n    owner = newOwner;\\n  }\\n\\n  /**\\n   * @param newDelay Updates the required delay before an change can be confirmed with a follow up t/x\\n   */\\n  function changeRequiredDelay(uint256 newDelay)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n    delayedExecution\\n  {\\n    require(newDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = newDelay;\\n  }\\n\\n  /**\\n   * @param name Hashes the supplied name\\n   * @return Returns the hash of the name\\n   */\\n  function getServiceNameHash(string memory name) external pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed name\\n   * @param serviceAddress The address stored for a given name\\n   */\\n  function addNamedService(bytes32 serviceNameHash, address serviceAddress)\\n    external\\n    onlyOwner\\n    validateInput(68)\\n    delayedExecution\\n  {\\n    require(namedService[serviceNameHash] == address(0), \\\"registry/service-override\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed name\\n   * @param serviceAddress The address to update for a given name\\n   */\\n  function updateNamedService(bytes32 serviceNameHash, address serviceAddress)\\n    external\\n    onlyOwner\\n    validateInput(68)\\n    delayedExecution\\n  {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed service name to remove\\n   */\\n  function removeNamedService(bytes32 serviceNameHash) external onlyOwner validateInput(36) {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = address(0);\\n    emit NamedServiceRemoved(serviceNameHash);\\n  }\\n\\n  /**\\n   * @param serviceName Get a service address by its name\\n   */\\n  function getRegisteredService(string memory serviceName) external view returns (address) {\\n    return namedService[keccak256(abi.encodePacked(serviceName))];\\n  }\\n\\n  /**\\n   * @param serviceNameHash Get a service address by the hash of its name\\n   */\\n  function getServiceAddress(bytes32 serviceNameHash) external view returns (address) {\\n    return namedService[serviceNameHash];\\n  }\\n\\n  /**\\n   * @dev Voids any submitted changes that are yet to be confirmed by a follow-up transaction\\n   * @param scheduledExecution Clear any scheduled changes\\n   */\\n  function clearScheduledExecution(bytes32 scheduledExecution)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n  {\\n    require(lastExecuted[scheduledExecution] > 0, \\\"registry/execution-not-scheduled\\\");\\n    lastExecuted[scheduledExecution] = 0;\\n    emit ChangeCancelled(scheduledExecution);\\n  }\\n\\n  event ChangeScheduled(bytes32 dataHash, uint256 scheduledFor, bytes data);\\n  event ChangeApplied(bytes32 dataHash, uint256 appliedAt, bytes data);\\n  event ChangeCancelled(bytes32 dataHash);\\n  event NamedServiceRemoved(bytes32 nameHash);\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/core/constants/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10**27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant PULL_TOKEN_ACTION = \\\"PullToken_3\\\";\\nstring constant SEND_TOKEN_ACTION = \\\"SendToken_3\\\";\\nstring constant SET_APPROVAL_ACTION = \\\"SetApproval_3\\\";\\nstring constant TAKE_FLASH_LOAN_ACTION = \\\"TakeFlashloan_3\\\";\\nstring constant WRAP_ETH = \\\"WrapEth_3\\\";\\nstring constant UNWRAP_ETH = \\\"UnwrapEth_3\\\";\\nstring constant RETURN_FUNDS_ACTION = \\\"ReturnFunds_3\\\";\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  bool dsProxyFlashloan;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  address proxyAddress;\\n  uint256 positionId;\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"}}}","address":"0x3C2BafebbB0c8c58f39A976e725cD20D611d01e9","bytecode":"0x60a06040523480156200001157600080fd5b5060405162001fd938038062001fd98339818101604052810190620000379190620002e8565b6001600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620000f8826200017660201b60201c565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000388565b6001600082815260200190815260200160002060009054906101000a900460ff1615620001dc57806040517f4552f1cf000000000000000000000000000000000000000000000000000000008152600401620001d391906200036b565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a750933816040516200023891906200036b565b60405180910390a150565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002758262000248565b9050919050565b620002878162000268565b81146200029357600080fd5b50565b600081519050620002a7816200027c565b92915050565b6000819050919050565b620002c281620002ad565b8114620002ce57600080fd5b50565b600081519050620002e281620002b7565b92915050565b6000806000806080858703121562000305576200030462000243565b5b6000620003158782880162000296565b9450506020620003288782880162000296565b93505060406200033b87828801620002d1565b92505060606200034e8782880162000296565b91505092959194509250565b6200036581620002ad565b82525050565b60006020820190506200038260008301846200035a565b92915050565b608051611c35620003a4600039600061029d0152611c356000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635207ce821161005b5780635207ce821461013957806395e911a814610157578063a001c36714610175578063f19e207e1461019157610088565b8063230ed44a1461008d5780632b5e4aab146100bd5780632c835492146100ed57806342b53e5f1461011d575b600080fd5b6100a760048036038101906100a291906112bd565b6101c1565b6040516100b49190611305565b60405180910390f35b6100d760048036038101906100d291906112bd565b6101e1565b6040516100e49190611305565b60405180910390f35b61010760048036038101906101029190611344565b61020b565b604051610114919061139c565b60405180910390f35b610137600480360381019061013291906112bd565b610510565b005b61014161065b565b60405161014e91906113f8565b60405180910390f35b61015f61067f565b60405161016c919061139c565b60405180910390f35b61018f600480360381019061018a91906112bd565b610685565b005b6101ab60048036038101906101a6919061143f565b610714565b6040516101b89190611305565b60405180910390f35b60016020528060005260406000206000915054906101000a900460ff1681565b60006001600083815260200190815260200160002060009054906101000a900460ff169050919050565b60006102503330846040013585600001602081019061022a919061143f565b73ffffffffffffffffffffffffffffffffffffffff16610734909392919063ffffffff16565b6000826040013590508260c001602081019061026c9190611498565b1561029957610296836000016020810190610287919061143f565b846040013585608001356107bd565b90505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280601181526020017f4f6e65496e636841676772656761746f720000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610329919061155e565b602060405180830381865afa158015610346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036a9190611595565b905060006103b3856000016020810190610384919061143f565b866020016020810190610397919061143f565b858860600135868a8060a001906103ae91906115d1565b61092d565b90508460c00160208101906103c89190611498565b6103f0576103ed8560200160208101906103e2919061143f565b8287608001356107bd565b90505b6000856000016020810190610405919061143f565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161043d91906113f8565b602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190611649565b905060008111156104c7576104c633828860000160208101906104a1919061143f565b73ffffffffffffffffffffffffffffffffffffffff16610ba89092919063ffffffff16565b5b61050433838860200160208101906104df919061143f565b73ffffffffffffffffffffffffffffffffffffffff16610ba89092919063ffffffff16565b81945050505050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610593576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060009054906101000a900460ff166105f557806040517f095f4a510000000000000000000000000000000000000000000000000000000081526004016105ec919061139c565b60405180910390fd5b60006001600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2b4584016031d9a0d1fc722a5f384f606370058bfcc1354c24264dbd139d67da81604051610650919061139c565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610708576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61071181610c2e565b50565b60026020528060005260406000206000915054906101000a900460ff1681565b6107b7846323b872dd60e01b85858560405160240161075593929190611676565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cf6565b50505050565b6000806107c9836101e1565b90508061080d57826040517f095f4a51000000000000000000000000000000000000000000000000000000008152600401610804919061139c565b60405180910390fd5b600061084861082761271086610dbd90919063ffffffff16565b61083a8688610e1b90919063ffffffff16565b610e9590919063ffffffff16565b9050600084111561090f5761089e60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828873ffffffffffffffffffffffffffffffffffffffff16610ba89092919063ffffffff16565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4756ac0011cd274810feab06c84b22207f6cf4374017214d7edbb4793e01b1dc82886040516109069291906116ad565b60405180910390a25b6109228186610edf90919063ffffffff16565b925050509392505050565b600061095a84878a73ffffffffffffffffffffffffffffffffffffffff16610f299092919063ffffffff16565b60008473ffffffffffffffffffffffffffffffffffffffff168484604051610983929190611715565b6000604051808303816000865af19150503d80600081146109c0576040519150601f19603f3d011682016040523d82523d6000602084013e6109c5565b606091505b5050905080610a00576040517f81ceff3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a3991906113f8565b602060405180830381865afa158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190611649565b91507fcfe2b36dff205c560fb985b2c9220458365fa2dcafb12305e0c565e84b84255b8683604051610aad92919061172e565b60405180910390a185821015610afc5785826040517f9061b0fc000000000000000000000000000000000000000000000000000000008152600401610af392919061172e565b60405180910390fd5b7fcfe2b36dff205c560fb985b2c9220458365fa2dcafb12305e0c565e84b84255b8683604051610b2d92919061172e565b60405180910390a18773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f945805326745354040d87a85082ddbf37400ed05d6ffe9ae1452b4c5cfe298838985604051610b9492919061172e565b60405180910390a350979650505050505050565b610c298363a9059cbb60e01b8484604051602401610bc7929190611757565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cf6565b505050565b6001600082815260200190815260200160002060009054906101000a900460ff1615610c9157806040517f4552f1cf000000000000000000000000000000000000000000000000000000008152600401610c88919061139c565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a75093381604051610ceb919061139c565b60405180910390a150565b6000610d58826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110319092919063ffffffff16565b9050600081511115610db85780806020019051810190610d789190611795565b610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae90611834565b60405180910390fd5b5b505050565b6000808284610dcc9190611883565b905083811015610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0890611925565b60405180910390fd5b8091505092915050565b6000808303610e2d5760009050610e8f565b60008284610e3b9190611945565b9050828482610e4a91906119ce565b14610e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8190611a71565b60405180910390fd5b809150505b92915050565b6000610ed783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611049565b905092915050565b6000610f2183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110ac565b905092915050565b610fab8363095ea7b360e01b846000604051602401610f49929190611ae3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cf6565b61102c8363095ea7b360e01b8484604051602401610fca929190611757565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cf6565b505050565b60606110408484600085611110565b90509392505050565b60008083118290611090576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611087919061155e565b60405180910390fd5b506000838561109f91906119ce565b9050809150509392505050565b60008383111582906110f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110eb919061155e565b60405180910390fd5b50600083856111039190611b0c565b9050809150509392505050565b606061111b85611232565b61115a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115190611b8c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111839190611be8565b60006040518083038185875af1925050503d80600081146111c0576040519150601f19603f3d011682016040523d82523d6000602084013e6111c5565b606091505b509150915081156111da57809250505061122a565b6000815111156111ed5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611221919061155e565b60405180910390fd5b949350505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561127457506000801b8214155b92505050919050565b600080fd5b600080fd5b6000819050919050565b61129a81611287565b81146112a557600080fd5b50565b6000813590506112b781611291565b92915050565b6000602082840312156112d3576112d261127d565b5b60006112e1848285016112a8565b91505092915050565b60008115159050919050565b6112ff816112ea565b82525050565b600060208201905061131a60008301846112f6565b92915050565b600080fd5b600060e0828403121561133b5761133a611320565b5b81905092915050565b60006020828403121561135a5761135961127d565b5b600082013567ffffffffffffffff81111561137857611377611282565b5b61138484828501611325565b91505092915050565b61139681611287565b82525050565b60006020820190506113b1600083018461138d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113e2826113b7565b9050919050565b6113f2816113d7565b82525050565b600060208201905061140d60008301846113e9565b92915050565b61141c816113d7565b811461142757600080fd5b50565b60008135905061143981611413565b92915050565b6000602082840312156114555761145461127d565b5b60006114638482850161142a565b91505092915050565b611475816112ea565b811461148057600080fd5b50565b6000813590506114928161146c565b92915050565b6000602082840312156114ae576114ad61127d565b5b60006114bc84828501611483565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114ff5780820151818401526020810190506114e4565b8381111561150e576000848401525b50505050565b6000601f19601f8301169050919050565b6000611530826114c5565b61153a81856114d0565b935061154a8185602086016114e1565b61155381611514565b840191505092915050565b600060208201905081810360008301526115788184611525565b905092915050565b60008151905061158f81611413565b92915050565b6000602082840312156115ab576115aa61127d565b5b60006115b984828501611580565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126115ee576115ed6115c2565b5b80840192508235915067ffffffffffffffff8211156116105761160f6115c7565b5b60208301925060018202360383131561162c5761162b6115cc565b5b509250929050565b60008151905061164381611291565b92915050565b60006020828403121561165f5761165e61127d565b5b600061166d84828501611634565b91505092915050565b600060608201905061168b60008301866113e9565b61169860208301856113e9565b6116a5604083018461138d565b949350505050565b60006040820190506116c2600083018561138d565b6116cf60208301846113e9565b9392505050565b600081905092915050565b82818337600083830152505050565b60006116fc83856116d6565b93506117098385846116e1565b82840190509392505050565b60006117228284866116f0565b91508190509392505050565b6000604082019050611743600083018561138d565b611750602083018461138d565b9392505050565b600060408201905061176c60008301856113e9565b611779602083018461138d565b9392505050565b60008151905061178f8161146c565b92915050565b6000602082840312156117ab576117aa61127d565b5b60006117b984828501611780565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061181e602a836114d0565b9150611829826117c2565b604082019050919050565b6000602082019050818103600083015261184d81611811565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061188e82611287565b915061189983611287565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118ce576118cd611854565b5b828201905092915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b600061190f601b836114d0565b915061191a826118d9565b602082019050919050565b6000602082019050818103600083015261193e81611902565b9050919050565b600061195082611287565b915061195b83611287565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561199457611993611854565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119d982611287565b91506119e483611287565b9250826119f4576119f361199f565b5b828204905092915050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a5b6021836114d0565b9150611a66826119ff565b604082019050919050565b60006020820190508181036000830152611a8a81611a4e565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611acd611ac8611ac384611a91565b611aa8565b611a9b565b9050919050565b611add81611ab2565b82525050565b6000604082019050611af860008301856113e9565b611b056020830184611ad4565b9392505050565b6000611b1782611287565b9150611b2283611287565b925082821015611b3557611b34611854565b5b828203905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611b76601d836114d0565b9150611b8182611b40565b602082019050919050565b60006020820190508181036000830152611ba581611b69565b9050919050565b600081519050919050565b6000611bc282611bac565b611bcc81856116d6565b9350611bdc8185602086016114e1565b80840191505092915050565b6000611bf48284611bb7565b91508190509291505056fea264697066735822122043249910027015cd6dacf47995def641863a535d86ff3fe059e524018dd9ad7a64736f6c634300080f0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100885760003560e01c80635207ce821161005b5780635207ce821461013957806395e911a814610157578063a001c36714610175578063f19e207e1461019157610088565b8063230ed44a1461008d5780632b5e4aab146100bd5780632c835492146100ed57806342b53e5f1461011d575b600080fd5b6100a760048036038101906100a291906112bd565b6101c1565b6040516100b49190611305565b60405180910390f35b6100d760048036038101906100d291906112bd565b6101e1565b6040516100e49190611305565b60405180910390f35b61010760048036038101906101029190611344565b61020b565b604051610114919061139c565b60405180910390f35b610137600480360381019061013291906112bd565b610510565b005b61014161065b565b60405161014e91906113f8565b60405180910390f35b61015f61067f565b60405161016c919061139c565b60405180910390f35b61018f600480360381019061018a91906112bd565b610685565b005b6101ab60048036038101906101a6919061143f565b610714565b6040516101b89190611305565b60405180910390f35b60016020528060005260406000206000915054906101000a900460ff1681565b60006001600083815260200190815260200160002060009054906101000a900460ff169050919050565b60006102503330846040013585600001602081019061022a919061143f565b73ffffffffffffffffffffffffffffffffffffffff16610734909392919063ffffffff16565b6000826040013590508260c001602081019061026c9190611498565b1561029957610296836000016020810190610287919061143f565b846040013585608001356107bd565b90505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280601181526020017f4f6e65496e636841676772656761746f720000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610329919061155e565b602060405180830381865afa158015610346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036a9190611595565b905060006103b3856000016020810190610384919061143f565b866020016020810190610397919061143f565b858860600135868a8060a001906103ae91906115d1565b61092d565b90508460c00160208101906103c89190611498565b6103f0576103ed8560200160208101906103e2919061143f565b8287608001356107bd565b90505b6000856000016020810190610405919061143f565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161043d91906113f8565b602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190611649565b905060008111156104c7576104c633828860000160208101906104a1919061143f565b73ffffffffffffffffffffffffffffffffffffffff16610ba89092919063ffffffff16565b5b61050433838860200160208101906104df919061143f565b73ffffffffffffffffffffffffffffffffffffffff16610ba89092919063ffffffff16565b81945050505050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610593576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060009054906101000a900460ff166105f557806040517f095f4a510000000000000000000000000000000000000000000000000000000081526004016105ec919061139c565b60405180910390fd5b60006001600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2b4584016031d9a0d1fc722a5f384f606370058bfcc1354c24264dbd139d67da81604051610650919061139c565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610708576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61071181610c2e565b50565b60026020528060005260406000206000915054906101000a900460ff1681565b6107b7846323b872dd60e01b85858560405160240161075593929190611676565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cf6565b50505050565b6000806107c9836101e1565b90508061080d57826040517f095f4a51000000000000000000000000000000000000000000000000000000008152600401610804919061139c565b60405180910390fd5b600061084861082761271086610dbd90919063ffffffff16565b61083a8688610e1b90919063ffffffff16565b610e9590919063ffffffff16565b9050600084111561090f5761089e60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828873ffffffffffffffffffffffffffffffffffffffff16610ba89092919063ffffffff16565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4756ac0011cd274810feab06c84b22207f6cf4374017214d7edbb4793e01b1dc82886040516109069291906116ad565b60405180910390a25b6109228186610edf90919063ffffffff16565b925050509392505050565b600061095a84878a73ffffffffffffffffffffffffffffffffffffffff16610f299092919063ffffffff16565b60008473ffffffffffffffffffffffffffffffffffffffff168484604051610983929190611715565b6000604051808303816000865af19150503d80600081146109c0576040519150601f19603f3d011682016040523d82523d6000602084013e6109c5565b606091505b5050905080610a00576040517f81ceff3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a3991906113f8565b602060405180830381865afa158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190611649565b91507fcfe2b36dff205c560fb985b2c9220458365fa2dcafb12305e0c565e84b84255b8683604051610aad92919061172e565b60405180910390a185821015610afc5785826040517f9061b0fc000000000000000000000000000000000000000000000000000000008152600401610af392919061172e565b60405180910390fd5b7fcfe2b36dff205c560fb985b2c9220458365fa2dcafb12305e0c565e84b84255b8683604051610b2d92919061172e565b60405180910390a18773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f945805326745354040d87a85082ddbf37400ed05d6ffe9ae1452b4c5cfe298838985604051610b9492919061172e565b60405180910390a350979650505050505050565b610c298363a9059cbb60e01b8484604051602401610bc7929190611757565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cf6565b505050565b6001600082815260200190815260200160002060009054906101000a900460ff1615610c9157806040517f4552f1cf000000000000000000000000000000000000000000000000000000008152600401610c88919061139c565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a75093381604051610ceb919061139c565b60405180910390a150565b6000610d58826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110319092919063ffffffff16565b9050600081511115610db85780806020019051810190610d789190611795565b610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae90611834565b60405180910390fd5b5b505050565b6000808284610dcc9190611883565b905083811015610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0890611925565b60405180910390fd5b8091505092915050565b6000808303610e2d5760009050610e8f565b60008284610e3b9190611945565b9050828482610e4a91906119ce565b14610e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8190611a71565b60405180910390fd5b809150505b92915050565b6000610ed783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611049565b905092915050565b6000610f2183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110ac565b905092915050565b610fab8363095ea7b360e01b846000604051602401610f49929190611ae3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cf6565b61102c8363095ea7b360e01b8484604051602401610fca929190611757565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cf6565b505050565b60606110408484600085611110565b90509392505050565b60008083118290611090576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611087919061155e565b60405180910390fd5b506000838561109f91906119ce565b9050809150509392505050565b60008383111582906110f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110eb919061155e565b60405180910390fd5b50600083856111039190611b0c565b9050809150509392505050565b606061111b85611232565b61115a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115190611b8c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111839190611be8565b60006040518083038185875af1925050503d80600081146111c0576040519150601f19603f3d011682016040523d82523d6000602084013e6111c5565b606091505b509150915081156111da57809250505061122a565b6000815111156111ed5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611221919061155e565b60405180910390fd5b949350505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561127457506000801b8214155b92505050919050565b600080fd5b600080fd5b6000819050919050565b61129a81611287565b81146112a557600080fd5b50565b6000813590506112b781611291565b92915050565b6000602082840312156112d3576112d261127d565b5b60006112e1848285016112a8565b91505092915050565b60008115159050919050565b6112ff816112ea565b82525050565b600060208201905061131a60008301846112f6565b92915050565b600080fd5b600060e0828403121561133b5761133a611320565b5b81905092915050565b60006020828403121561135a5761135961127d565b5b600082013567ffffffffffffffff81111561137857611377611282565b5b61138484828501611325565b91505092915050565b61139681611287565b82525050565b60006020820190506113b1600083018461138d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113e2826113b7565b9050919050565b6113f2816113d7565b82525050565b600060208201905061140d60008301846113e9565b92915050565b61141c816113d7565b811461142757600080fd5b50565b60008135905061143981611413565b92915050565b6000602082840312156114555761145461127d565b5b60006114638482850161142a565b91505092915050565b611475816112ea565b811461148057600080fd5b50565b6000813590506114928161146c565b92915050565b6000602082840312156114ae576114ad61127d565b5b60006114bc84828501611483565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114ff5780820151818401526020810190506114e4565b8381111561150e576000848401525b50505050565b6000601f19601f8301169050919050565b6000611530826114c5565b61153a81856114d0565b935061154a8185602086016114e1565b61155381611514565b840191505092915050565b600060208201905081810360008301526115788184611525565b905092915050565b60008151905061158f81611413565b92915050565b6000602082840312156115ab576115aa61127d565b5b60006115b984828501611580565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126115ee576115ed6115c2565b5b80840192508235915067ffffffffffffffff8211156116105761160f6115c7565b5b60208301925060018202360383131561162c5761162b6115cc565b5b509250929050565b60008151905061164381611291565b92915050565b60006020828403121561165f5761165e61127d565b5b600061166d84828501611634565b91505092915050565b600060608201905061168b60008301866113e9565b61169860208301856113e9565b6116a5604083018461138d565b949350505050565b60006040820190506116c2600083018561138d565b6116cf60208301846113e9565b9392505050565b600081905092915050565b82818337600083830152505050565b60006116fc83856116d6565b93506117098385846116e1565b82840190509392505050565b60006117228284866116f0565b91508190509392505050565b6000604082019050611743600083018561138d565b611750602083018461138d565b9392505050565b600060408201905061176c60008301856113e9565b611779602083018461138d565b9392505050565b60008151905061178f8161146c565b92915050565b6000602082840312156117ab576117aa61127d565b5b60006117b984828501611780565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061181e602a836114d0565b9150611829826117c2565b604082019050919050565b6000602082019050818103600083015261184d81611811565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061188e82611287565b915061189983611287565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118ce576118cd611854565b5b828201905092915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b600061190f601b836114d0565b915061191a826118d9565b602082019050919050565b6000602082019050818103600083015261193e81611902565b9050919050565b600061195082611287565b915061195b83611287565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561199457611993611854565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119d982611287565b91506119e483611287565b9250826119f4576119f361199f565b5b828204905092915050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a5b6021836114d0565b9150611a66826119ff565b604082019050919050565b60006020820190508181036000830152611a8a81611a4e565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611acd611ac8611ac384611a91565b611aa8565b611a9b565b9050919050565b611add81611ab2565b82525050565b6000604082019050611af860008301856113e9565b611b056020830184611ad4565b9392505050565b6000611b1782611287565b9150611b2283611287565b925082821015611b3557611b34611854565b5b828203905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611b76601d836114d0565b9150611b8182611b40565b602082019050919050565b60006020820190508181036000830152611ba581611b69565b9050919050565b600081519050919050565b6000611bc282611bac565b611bcc81856116d6565b9350611bdc8185602086016114e1565b80840191505092915050565b6000611bf48284611bb7565b91508190509291505056fea264697066735822122043249910027015cd6dacf47995def641863a535d86ff3fe059e524018dd9ad7a64736f6c634300080f0033","abi":[{"inputs":[{"internalType":"address","name":"authorisedCaller","type":"address"},{"internalType":"address","name":"feeBeneficiary","type":"address"},{"internalType":"uint256","name":"_initialFee","type":"uint256"},{"internalType":"address","name":"_registry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierAlreadyExists","type":"error"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierDoesNotExist","type":"error"},{"inputs":[{"internalType":"uint256","name":"receiveAtLeast","type":"uint256"},{"internalType":"uint256","name":"received","type":"uint256"}],"name":"ReceivedLess","type":"error"},{"inputs":[],"name":"SwapFailed","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"assetIn","type":"address"},{"indexed":true,"internalType":"address","name":"assetOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"AssetSwap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beneficiary","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"FeePaid","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"minimumPossible","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualAmount","type":"uint256"}],"name":"SlippageSaved","type":"event"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"addFeeTier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorizedAddresses","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeBase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeBeneficiaryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"feeTiers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"removeFeeTier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"fromAsset","type":"address"},{"internalType":"address","name":"toAsset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"receiveAtLeast","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"withData","type":"bytes"},{"internalType":"bool","name":"collectFeeInFromToken","type":"bool"}],"internalType":"struct SwapData","name":"swapData","type":"tuple"}],"name":"swapTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"feeId","type":"uint256"}],"name":"verifyFee","outputs":[{"internalType":"bool","name":"valid","type":"bool"}],"stateMutability":"view","type":"function"}]}