{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.15\"},\"sources\":{\"contracts/actions/common/uSwap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { ISwapRouter } from \\\"../../interfaces/common/ISwapRouter.sol\\\";\\nimport { IERC20 } from \\\"../../interfaces/tokens/IERC20.sol\\\";\\nimport { SafeMath } from \\\"../../libs/SafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\nimport { UNISWAP_ROUTER } from \\\"../../core/constants/Common.sol\\\";\\nimport { SwapData } from \\\"../../core/types/Common.sol\\\";\\n\\ncontract uSwap {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  address public feeBeneficiaryAddress;\\n  uint256 public constant feeBase = 10000;\\n  mapping(uint256 => bool) public feeTiers;\\n  mapping(address => bool) public authorizedAddresses;\\n\\n  mapping(bytes32 => uint24) public pools;\\n  ServiceRegistry internal immutable registry;\\n\\n  error ReceivedLess(uint256 receiveAtLeast, uint256 received);\\n  error Unauthorized();\\n  error FeeTierDoesNotExist(uint256 fee);\\n  error FeeTierAlreadyExists(uint256 fee);\\n  error SwapFailed();\\n\\n  constructor(\\n    address authorisedCaller,\\n    address feeBeneficiary,\\n    uint256 _initialFee,\\n    address _registry\\n  ) {\\n    authorizedAddresses[authorisedCaller] = true;\\n    authorizedAddresses[feeBeneficiary] = true;\\n    _addFeeTier(_initialFee);\\n    feeBeneficiaryAddress = feeBeneficiary;\\n    registry = ServiceRegistry(_registry);\\n  }\\n\\n  event AssetSwap(\\n    address indexed assetIn,\\n    address indexed assetOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  event FeePaid(address indexed beneficiary, uint256 amount, address token);\\n  event SlippageSaved(uint256 minimumPossible, uint256 actualAmount);\\n  event FeeTierAdded(uint256 fee);\\n  event FeeTierRemoved(uint256 fee);\\n\\n  struct SwapDescription {\\n    IERC20 srcToken;\\n    IERC20 dstToken;\\n    address payable srcReceiver;\\n    address payable dstReceiver;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n    bytes permit;\\n  }\\n\\n  modifier onlyAuthorised() {\\n    if (!authorizedAddresses[msg.sender]) {\\n      revert Unauthorized();\\n    }\\n    _;\\n  }\\n\\n  function _addFeeTier(uint256 fee) private {\\n    if (feeTiers[fee]) {\\n      revert FeeTierAlreadyExists(fee);\\n    }\\n    feeTiers[fee] = true;\\n    emit FeeTierAdded(fee);\\n  }\\n\\n  function addFeeTier(uint256 fee) public onlyAuthorised {\\n    _addFeeTier(fee);\\n  }\\n\\n  function removeFeeTier(uint256 fee) public onlyAuthorised {\\n    if (!feeTiers[fee]) {\\n      revert FeeTierDoesNotExist(fee);\\n    }\\n    feeTiers[fee] = false;\\n    emit FeeTierRemoved(fee);\\n  }\\n\\n  function setPool(\\n    address fromToken,\\n    address toToken,\\n    uint24 pool\\n  ) public onlyAuthorised {\\n    pools[keccak256(abi.encodePacked(fromToken, toToken))] = pool;\\n    pools[keccak256(abi.encodePacked(toToken, fromToken))] = pool;\\n  }\\n\\n  function getPool(address fromToken, address toToken) public view returns (uint24) {\\n    uint24 pool = pools[keccak256(abi.encodePacked(fromToken, toToken))];\\n\\n    if (pool > 0) {\\n      return pool;\\n    } else {\\n      return 3000;\\n    }\\n  }\\n\\n  function verifyFee(uint256 feeId) public view returns (bool valid) {\\n    valid = feeTiers[feeId];\\n  }\\n\\n  function _swap(\\n    address fromAsset,\\n    address toAsset,\\n    uint256 amount,\\n    uint256 receiveAtLeast\\n  ) internal returns (uint256 balance) {\\n    ISwapRouter uniswap = ISwapRouter(registry.getRegisteredService(UNISWAP_ROUTER));\\n\\n    IERC20(fromAsset).safeApprove(address(uniswap), amount);\\n    uint24 pool = getPool(fromAsset, toAsset);\\n\\n    uniswap.exactInputSingle(\\n      ISwapRouter.ExactInputSingleParams({\\n        tokenIn: fromAsset,\\n        tokenOut: toAsset,\\n        amountIn: amount,\\n        amountOutMinimum: receiveAtLeast,\\n        fee: pool,\\n        recipient: address(this),\\n        deadline: block.timestamp + 15,\\n        sqrtPriceLimitX96: 0\\n      })\\n    );\\n\\n    balance = IERC20(toAsset).balanceOf(address(this));\\n\\n    if (balance == 0) {\\n      revert SwapFailed();\\n    }\\n\\n    emit SlippageSaved(receiveAtLeast, balance);\\n    if (balance < receiveAtLeast) {\\n      revert ReceivedLess(receiveAtLeast, balance);\\n    }\\n    emit AssetSwap(fromAsset, toAsset, amount, balance);\\n  }\\n\\n  function _collectFee(\\n    address asset,\\n    uint256 fromAmount,\\n    uint256 fee\\n  ) internal returns (uint256 amount) {\\n    bool isFeeValid = verifyFee(fee);\\n    if (!isFeeValid) {\\n      revert FeeTierDoesNotExist(fee);\\n    }\\n    uint256 feeToTransfer = fromAmount.mul(fee).div(fee.add(feeBase));\\n\\n    if (fee > 0) {\\n      IERC20(asset).safeTransfer(feeBeneficiaryAddress, feeToTransfer);\\n      emit FeePaid(feeBeneficiaryAddress, feeToTransfer, asset);\\n    }\\n\\n    amount = fromAmount.sub(feeToTransfer);\\n  }\\n\\n  function compareMethodSigs(bytes memory a, bytes memory b) internal pure returns (bool) {\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(bytes4(keccak256(b))));\\n  }\\n\\n  function decodeOneInchCallData(bytes calldata withData) public pure returns (uint256 minReturn) {\\n    bytes memory uniswapV3Swap = \\\"uniswapV3Swap(uint256,uint256,uint256[])\\\";\\n    bytes memory unoswap = \\\"unoswap(address,uint256,uint256,bytes32[])\\\";\\n    bytes\\n      memory swap = \\\"swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)\\\";\\n\\n    if (withData.length < 4) {\\n      minReturn = 0;\\n      return minReturn;\\n    }\\n\\n    bytes memory methodSig = withData[:4];\\n\\n    if (compareMethodSigs(methodSig, uniswapV3Swap)) {\\n      (uint256 amount, uint256 _minReturn, uint256[] memory pools) = abi.decode(\\n        withData[4:],\\n        (uint256, uint256, uint256[])\\n      );\\n      minReturn = _minReturn;\\n    } else if (compareMethodSigs(methodSig, unoswap)) {\\n      (address srcToken, uint256 amount, uint256 _minReturn, bytes32[] memory pools) = abi.decode(\\n        withData[4:],\\n        (address, uint256, uint256, bytes32[])\\n      );\\n      minReturn = _minReturn;\\n    } else if (compareMethodSigs(methodSig, swap)) {\\n      (address a, SwapDescription memory swapDescription, bytes memory j) = abi.decode(\\n        withData[4:],\\n        (address, SwapDescription, bytes)\\n      );\\n      minReturn = swapDescription.minReturnAmount;\\n    } else {\\n      // Im not sure whether this is the best way to handle this\\n      minReturn = 0;\\n    }\\n  }\\n\\n  function swapTokens(SwapData calldata swapData) public returns (uint256) {\\n    IERC20(swapData.fromAsset).safeTransferFrom(msg.sender, address(this), swapData.amount);\\n\\n    uint256 amountFrom = swapData.amount;\\n\\n    if (swapData.collectFeeInFromToken) {\\n      amountFrom = _collectFee(swapData.fromAsset, swapData.amount, swapData.fee);\\n    }\\n\\n    uint256 toTokenBalance = _swap(\\n      swapData.fromAsset,\\n      swapData.toAsset,\\n      amountFrom,\\n      swapData.receiveAtLeast\\n    );\\n\\n    uint256 receiveAtLeastFromCallData = decodeOneInchCallData(swapData.withData);\\n\\n    if (receiveAtLeastFromCallData > toTokenBalance) {\\n      revert ReceivedLess(receiveAtLeastFromCallData, swapData.receiveAtLeast);\\n    }\\n\\n    if (!swapData.collectFeeInFromToken) {\\n      toTokenBalance = _collectFee(swapData.toAsset, toTokenBalance, swapData.fee);\\n    }\\n\\n    uint256 fromTokenBalance = IERC20(swapData.fromAsset).balanceOf(address(this));\\n    if (fromTokenBalance > 0) {\\n      IERC20(swapData.fromAsset).safeTransfer(msg.sender, fromTokenBalance);\\n    }\\n\\n    IERC20(swapData.toAsset).safeTransfer(msg.sender, toTokenBalance);\\n    return toTokenBalance;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/ServiceRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.1;\\n\\n/**\\n * @title Service Registry\\n * @notice Stores addresses of deployed contracts\\n */\\ncontract ServiceRegistry {\\n  uint256 public constant MAX_DELAY = 30 days;\\n\\n  mapping(bytes32 => uint256) public lastExecuted;\\n  mapping(bytes32 => address) private namedService;\\n  address public owner;\\n  uint256 public requiredDelay;\\n\\n  modifier validateInput(uint256 len) {\\n    require(msg.data.length == len, \\\"registry/illegal-padding\\\");\\n    _;\\n  }\\n\\n  modifier delayedExecution() {\\n    bytes32 operationHash = keccak256(msg.data);\\n    uint256 reqDelay = requiredDelay;\\n\\n    /* solhint-disable not-rely-on-time */\\n    if (lastExecuted[operationHash] == 0 && reqDelay > 0) {\\n      // not called before, scheduled for execution\\n      lastExecuted[operationHash] = block.timestamp;\\n      emit ChangeScheduled(operationHash, block.timestamp + reqDelay, msg.data);\\n    } else {\\n      require(block.timestamp - reqDelay > lastExecuted[operationHash], \\\"registry/delay-too-small\\\");\\n      emit ChangeApplied(operationHash, block.timestamp, msg.data);\\n      _;\\n      lastExecuted[operationHash] = 0;\\n    }\\n    /* solhint-enable not-rely-on-time */\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"registry/only-owner\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 initialDelay) {\\n    require(initialDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = initialDelay;\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @param newOwner Transfers ownership of the registry to a new address\\n   */\\n  function transferOwnership(address newOwner)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n    delayedExecution\\n  {\\n    owner = newOwner;\\n  }\\n\\n  /**\\n   * @param newDelay Updates the required delay before an change can be confirmed with a follow up t/x\\n   */\\n  function changeRequiredDelay(uint256 newDelay)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n    delayedExecution\\n  {\\n    require(newDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = newDelay;\\n  }\\n\\n  /**\\n   * @param name Hashes the supplied name\\n   * @return Returns the hash of the name\\n   */\\n  function getServiceNameHash(string memory name) external pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed name\\n   * @param serviceAddress The address stored for a given name\\n   */\\n  function addNamedService(bytes32 serviceNameHash, address serviceAddress)\\n    external\\n    onlyOwner\\n    validateInput(68)\\n    delayedExecution\\n  {\\n    require(namedService[serviceNameHash] == address(0), \\\"registry/service-override\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed name\\n   * @param serviceAddress The address to update for a given name\\n   */\\n  function updateNamedService(bytes32 serviceNameHash, address serviceAddress)\\n    external\\n    onlyOwner\\n    validateInput(68)\\n    delayedExecution\\n  {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed service name to remove\\n   */\\n  function removeNamedService(bytes32 serviceNameHash) external onlyOwner validateInput(36) {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = address(0);\\n    emit NamedServiceRemoved(serviceNameHash);\\n  }\\n\\n  /**\\n   * @param serviceName Get a service address by its name\\n   */\\n  function getRegisteredService(string memory serviceName) external view returns (address) {\\n    return namedService[keccak256(abi.encodePacked(serviceName))];\\n  }\\n\\n  /**\\n   * @param serviceNameHash Get a service address by the hash of its name\\n   */\\n  function getServiceAddress(bytes32 serviceNameHash) external view returns (address) {\\n    return namedService[serviceNameHash];\\n  }\\n\\n  /**\\n   * @dev Voids any submitted changes that are yet to be confirmed by a follow-up transaction\\n   * @param scheduledExecution Clear any scheduled changes\\n   */\\n  function clearScheduledExecution(bytes32 scheduledExecution)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n  {\\n    require(lastExecuted[scheduledExecution] > 0, \\\"registry/execution-not-scheduled\\\");\\n    lastExecuted[scheduledExecution] = 0;\\n    emit ChangeCancelled(scheduledExecution);\\n  }\\n\\n  event ChangeScheduled(bytes32 dataHash, uint256 scheduledFor, bytes data);\\n  event ChangeApplied(bytes32 dataHash, uint256 appliedAt, bytes data);\\n  event ChangeCancelled(bytes32 dataHash);\\n  event NamedServiceRemoved(bytes32 nameHash);\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/interfaces/common/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.8.1;\\n\\ninterface ISwapRouter {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  function exactInputSingle(ExactInputSingleParams calldata params) external returns (uint256);\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/core/constants/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10**27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant PULL_TOKEN_ACTION = \\\"PullToken_3\\\";\\nstring constant SEND_TOKEN_ACTION = \\\"SendToken_3\\\";\\nstring constant SET_APPROVAL_ACTION = \\\"SetApproval_3\\\";\\nstring constant TAKE_FLASH_LOAN_ACTION = \\\"TakeFlashloan_3\\\";\\nstring constant WRAP_ETH = \\\"WrapEth_3\\\";\\nstring constant UNWRAP_ETH = \\\"UnwrapEth_3\\\";\\nstring constant RETURN_FUNDS_ACTION = \\\"ReturnFunds_3\\\";\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  bool dsProxyFlashloan;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  address proxyAddress;\\n  uint256 positionId;\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"}}}","address":"0x876939152C56362e17D508B9DEA77a3fDF9e4083","bytecode":"0x60a06040523480156200001157600080fd5b5060405162002f9838038062002f988339818101604052810190620000379190620002e8565b6001600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620000f8826200017660201b60201c565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000388565b6001600082815260200190815260200160002060009054906101000a900460ff1615620001dc57806040517f4552f1cf000000000000000000000000000000000000000000000000000000008152600401620001d391906200036b565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a750933816040516200023891906200036b565b60405180910390a150565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002758262000248565b9050919050565b620002878162000268565b81146200029357600080fd5b50565b600081519050620002a7816200027c565b92915050565b6000819050919050565b620002c281620002ad565b8114620002ce57600080fd5b50565b600081519050620002e281620002b7565b92915050565b6000806000806080858703121562000305576200030462000243565b5b6000620003158782880162000296565b9450506020620003288782880162000296565b93505060406200033b87828801620002d1565b92505060606200034e8782880162000296565b91505092959194509250565b6200036581620002ad565b82525050565b60006020820190506200038260008301846200035a565b92915050565b608051612bf4620003a46000396000610d6f0152612bf46000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063531aa03e11610071578063531aa03e146101b357806395e911a8146101e3578063a001c36714610201578063b5217bb41461021d578063cd705de31461024d578063f19e207e14610269576100b4565b80631f3de395146100b9578063230ed44a146100e95780632b5e4aab146101195780632c8354921461014957806342b53e5f146101795780635207ce8214610195575b600080fd5b6100d360048036038101906100ce919061188c565b610299565b6040516100e091906118f2565b60405180910390f35b61010360048036038101906100fe9190611939565b61044d565b6040516101109190611981565b60405180910390f35b610133600480360381019061012e9190611939565b61046d565b6040516101409190611981565b60405180910390f35b610163600480360381019061015e91906119c0565b610497565b60405161017091906118f2565b60405180910390f35b610193600480360381019061018e9190611939565b61071f565b005b61019d61086a565b6040516101aa9190611a4a565b60405180910390f35b6101cd60048036038101906101c89190611a91565b61088e565b6040516101da9190611aef565b60405180910390f35b6101eb610902565b6040516101f891906118f2565b60405180910390f35b61021b60048036038101906102169190611939565b610908565b005b61023760048036038101906102329190611b40565b610997565b6040516102449190611aef565b60405180910390f35b61026760048036038101906102629190611b99565b6109b9565b005b610283600480360381019061027e9190611bec565b610af1565b6040516102909190611981565b60405180910390f35b600080604051806060016040528060288152602001612b9760289139905060006040518060600160405280602a8152602001612b1a602a913990506000604051806080016040528060538152602001612b4460539139905060048686905010156103095760009350505050610447565b6000868660009060049261031f93929190611c23565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905061036e8185610b11565b156103a95760008060008989600490809261038b93929190611c23565b8101906103989190611dad565b925092509250819750505050610442565b6103b38184610b11565b156103f2576000806000808a8a60049080926103d193929190611c23565b8101906103de9190611f1d565b935093509350935081985050505050610441565b6103fc8183610b11565b1561043b5760008060008989600490809261041993929190611c23565b8101906104269190612183565b9250925092508160a001519750505050610440565b600094505b5b5b505050505b92915050565b60016020528060005260406000206000915054906101000a900460ff1681565b60006001600083815260200190815260200160002060009054906101000a900460ff169050919050565b60006104dc333084604001358560000160208101906104b69190611bec565b73ffffffffffffffffffffffffffffffffffffffff16610b71909392919063ffffffff16565b6000826040013590508260c00160208101906104f8919061223a565b15610525576105228360000160208101906105139190611bec565b84604001358560800135610bfa565b90505b600061055b84600001602081019061053d9190611bec565b8560200160208101906105509190611bec565b848760600135610d6a565b90506000610577858060a001906105729190612276565b610299565b9050818111156105c4578085606001356040517f9061b0fc0000000000000000000000000000000000000000000000000000000081526004016105bb9291906122d9565b60405180910390fd5b8460c00160208101906105d7919061223a565b6105ff576105fc8560200160208101906105f19190611bec565b838760800135610bfa565b91505b60008560000160208101906106149190611bec565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161064c9190611a4a565b602060405180830381865afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d9190612317565b905060008111156106d6576106d533828860000160208101906106b09190611bec565b73ffffffffffffffffffffffffffffffffffffffff1661113e9092919063ffffffff16565b5b61071333848860200160208101906106ee9190611bec565b73ffffffffffffffffffffffffffffffffffffffff1661113e9092919063ffffffff16565b82945050505050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107a2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060009054906101000a900460ff1661080457806040517f095f4a510000000000000000000000000000000000000000000000000000000081526004016107fb91906118f2565b60405180910390fd5b60006001600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2b4584016031d9a0d1fc722a5f384f606370058bfcc1354c24264dbd139d67da8160405161085f91906118f2565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806003600085856040516020016108a892919061238c565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900462ffffff16905060008162ffffff1611156108f557809150506108fc565b610bb89150505b92915050565b61271081565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661098b576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610994816111c4565b50565b60036020528060005260406000206000915054906101000a900462ffffff1681565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a3c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008585604051602001610a5492919061238c565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548162ffffff021916908362ffffff16021790555080600360008486604051602001610aac92919061238c565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548162ffffff021916908362ffffff160217905550505050565b60026020528060005260406000206000915054906101000a900460ff1681565b60008180519060200120604051602001610b2b9190612405565b6040516020818303038152906040528051906020012083604051602001610b52919061249a565b6040516020818303038152906040528051906020012014905092915050565b610bf4846323b872dd60e01b858585604051602401610b92939291906124b1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061128c565b50505050565b600080610c068361046d565b905080610c4a57826040517f095f4a51000000000000000000000000000000000000000000000000000000008152600401610c4191906118f2565b60405180910390fd5b6000610c85610c646127108661135390919063ffffffff16565b610c7786886113b190919063ffffffff16565b61142b90919063ffffffff16565b90506000841115610d4c57610cdb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828873ffffffffffffffffffffffffffffffffffffffff1661113e9092919063ffffffff16565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4756ac0011cd274810feab06c84b22207f6cf4374017214d7edbb4793e01b1dc8288604051610d439291906124e8565b60405180910390a25b610d5f818661147590919063ffffffff16565b925050509392505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280600d81526020017f556e6973776170526f75746572000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610dfb9190612566565b602060405180830381865afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c919061259d565b9050610e6981858873ffffffffffffffffffffffffffffffffffffffff166114bf9092919063ffffffff16565b6000610e75878761088e565b90508173ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001600f42610f0b91906125f9565b8152602001888152602001878152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610f53919061272d565b6020604051808303816000875af1158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f969190612317565b508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fd09190611a4a565b602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190612317565b92506000830361104d576040517f81ceff3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fcfe2b36dff205c560fb985b2c9220458365fa2dcafb12305e0c565e84b84255b848460405161107e9291906122d9565b60405180910390a1838310156110cd5783836040517f9061b0fc0000000000000000000000000000000000000000000000000000000081526004016110c49291906122d9565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f945805326745354040d87a85082ddbf37400ed05d6ffe9ae1452b4c5cfe29883878660405161112c9291906122d9565b60405180910390a35050949350505050565b6111bf8363a9059cbb60e01b848460405160240161115d929190612749565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061128c565b505050565b6001600082815260200190815260200160002060009054906101000a900460ff161561122757806040517f4552f1cf00000000000000000000000000000000000000000000000000000000815260040161121e91906118f2565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a7509338160405161128191906118f2565b60405180910390a150565b60006112ee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115c79092919063ffffffff16565b905060008151111561134e578080602001905181019061130e9190612787565b61134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134490612826565b60405180910390fd5b5b505050565b600080828461136291906125f9565b9050838110156113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e90612892565b60405180910390fd5b8091505092915050565b60008083036113c35760009050611425565b600082846113d191906128b2565b90508284826113e0919061293b565b14611420576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611417906129de565b60405180910390fd5b809150505b92915050565b600061146d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115df565b905092915050565b60006114b783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611642565b905092915050565b6115418363095ea7b360e01b8460006040516024016114df929190612a50565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061128c565b6115c28363095ea7b360e01b8484604051602401611560929190612749565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061128c565b505050565b60606115d684846000856116a6565b90509392505050565b60008083118290611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d9190612566565b60405180910390fd5b5060008385611635919061293b565b9050809150509392505050565b600083831115829061168a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116819190612566565b60405180910390fd5b50600083856116999190612a79565b9050809150509392505050565b60606116b1856117c8565b6116f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e790612af9565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611719919061249a565b60006040518083038185875af1925050503d8060008114611756576040519150601f19603f3d011682016040523d82523d6000602084013e61175b565b606091505b509150915081156117705780925050506117c0565b6000815111156117835780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b79190612566565b60405180910390fd5b949350505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561180a57506000801b8214155b92505050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261184c5761184b611827565b5b8235905067ffffffffffffffff8111156118695761186861182c565b5b60208301915083600182028301111561188557611884611831565b5b9250929050565b600080602083850312156118a3576118a261181d565b5b600083013567ffffffffffffffff8111156118c1576118c0611822565b5b6118cd85828601611836565b92509250509250929050565b6000819050919050565b6118ec816118d9565b82525050565b600060208201905061190760008301846118e3565b92915050565b611916816118d9565b811461192157600080fd5b50565b6000813590506119338161190d565b92915050565b60006020828403121561194f5761194e61181d565b5b600061195d84828501611924565b91505092915050565b60008115159050919050565b61197b81611966565b82525050565b60006020820190506119966000830184611972565b92915050565b600080fd5b600060e082840312156119b7576119b661199c565b5b81905092915050565b6000602082840312156119d6576119d561181d565b5b600082013567ffffffffffffffff8111156119f4576119f3611822565b5b611a00848285016119a1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a3482611a09565b9050919050565b611a4481611a29565b82525050565b6000602082019050611a5f6000830184611a3b565b92915050565b611a6e81611a29565b8114611a7957600080fd5b50565b600081359050611a8b81611a65565b92915050565b60008060408385031215611aa857611aa761181d565b5b6000611ab685828601611a7c565b9250506020611ac785828601611a7c565b9150509250929050565b600062ffffff82169050919050565b611ae981611ad1565b82525050565b6000602082019050611b046000830184611ae0565b92915050565b6000819050919050565b611b1d81611b0a565b8114611b2857600080fd5b50565b600081359050611b3a81611b14565b92915050565b600060208284031215611b5657611b5561181d565b5b6000611b6484828501611b2b565b91505092915050565b611b7681611ad1565b8114611b8157600080fd5b50565b600081359050611b9381611b6d565b92915050565b600080600060608486031215611bb257611bb161181d565b5b6000611bc086828701611a7c565b9350506020611bd186828701611a7c565b9250506040611be286828701611b84565b9150509250925092565b600060208284031215611c0257611c0161181d565b5b6000611c1084828501611a7c565b91505092915050565b600080fd5b600080fd5b60008085851115611c3757611c36611c19565b5b83861115611c4857611c47611c1e565b5b6001850283019150848603905094509492505050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ca782611c5e565b810181811067ffffffffffffffff82111715611cc657611cc5611c6f565b5b80604052505050565b6000611cd9611813565b9050611ce58282611c9e565b919050565b600067ffffffffffffffff821115611d0557611d04611c6f565b5b602082029050602081019050919050565b6000611d29611d2484611cea565b611ccf565b90508083825260208201905060208402830185811115611d4c57611d4b611831565b5b835b81811015611d755780611d618882611924565b845260208401935050602081019050611d4e565b5050509392505050565b600082601f830112611d9457611d93611827565b5b8135611da4848260208601611d16565b91505092915050565b600080600060608486031215611dc657611dc561181d565b5b6000611dd486828701611924565b9350506020611de586828701611924565b925050604084013567ffffffffffffffff811115611e0657611e05611822565b5b611e1286828701611d7f565b9150509250925092565b6000611e2782611a09565b9050919050565b611e3781611e1c565b8114611e4257600080fd5b50565b600081359050611e5481611e2e565b92915050565b600067ffffffffffffffff821115611e7557611e74611c6f565b5b602082029050602081019050919050565b6000611e99611e9484611e5a565b611ccf565b90508083825260208201905060208402830185811115611ebc57611ebb611831565b5b835b81811015611ee55780611ed18882611b2b565b845260208401935050602081019050611ebe565b5050509392505050565b600082601f830112611f0457611f03611827565b5b8135611f14848260208601611e86565b91505092915050565b60008060008060808587031215611f3757611f3661181d565b5b6000611f4587828801611e45565b9450506020611f5687828801611924565b9350506040611f6787828801611924565b925050606085013567ffffffffffffffff811115611f8857611f87611822565b5b611f9487828801611eef565b91505092959194509250565b600080fd5b600080fd5b6000611fb582611a29565b9050919050565b611fc581611faa565b8114611fd057600080fd5b50565b600081359050611fe281611fbc565b92915050565b600080fd5b600067ffffffffffffffff82111561200857612007611c6f565b5b61201182611c5e565b9050602081019050919050565b82818337600083830152505050565b600061204061203b84611fed565b611ccf565b90508281526020810184848401111561205c5761205b611fe8565b5b61206784828561201e565b509392505050565b600082601f83011261208457612083611827565b5b813561209484826020860161202d565b91505092915050565b600061010082840312156120b4576120b3611fa0565b5b6120bf610100611ccf565b905060006120cf84828501611fd3565b60008301525060206120e384828501611fd3565b60208301525060406120f784828501611e45565b604083015250606061210b84828501611e45565b606083015250608061211f84828501611924565b60808301525060a061213384828501611924565b60a08301525060c061214784828501611924565b60c08301525060e082013567ffffffffffffffff81111561216b5761216a611fa5565b5b6121778482850161206f565b60e08301525092915050565b60008060006060848603121561219c5761219b61181d565b5b60006121aa86828701611e45565b935050602084013567ffffffffffffffff8111156121cb576121ca611822565b5b6121d78682870161209d565b925050604084013567ffffffffffffffff8111156121f8576121f7611822565b5b6122048682870161206f565b9150509250925092565b61221781611966565b811461222257600080fd5b50565b6000813590506122348161220e565b92915050565b6000602082840312156122505761224f61181d565b5b600061225e84828501612225565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261229357612292612267565b5b80840192508235915067ffffffffffffffff8211156122b5576122b461226c565b5b6020830192506001820236038313156122d1576122d0612271565b5b509250929050565b60006040820190506122ee60008301856118e3565b6122fb60208301846118e3565b9392505050565b6000815190506123118161190d565b92915050565b60006020828403121561232d5761232c61181d565b5b600061233b84828501612302565b91505092915050565b60008160601b9050919050565b600061235c82612344565b9050919050565b600061236e82612351565b9050919050565b61238661238182611a29565b612363565b82525050565b60006123988285612375565b6014820191506123a88284612375565b6014820191508190509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6123ff6123fa826123b8565b6123e4565b82525050565b600061241182846123ee565b60048201915081905092915050565b600081519050919050565b600081905092915050565b60005b83811015612454578082015181840152602081019050612439565b83811115612463576000848401525b50505050565b600061247482612420565b61247e818561242b565b935061248e818560208601612436565b80840191505092915050565b60006124a68284612469565b915081905092915050565b60006060820190506124c66000830186611a3b565b6124d36020830185611a3b565b6124e060408301846118e3565b949350505050565b60006040820190506124fd60008301856118e3565b61250a6020830184611a3b565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061253882612511565b612542818561251c565b9350612552818560208601612436565b61255b81611c5e565b840191505092915050565b60006020820190508181036000830152612580818461252d565b905092915050565b60008151905061259781611a65565b92915050565b6000602082840312156125b3576125b261181d565b5b60006125c184828501612588565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612604826118d9565b915061260f836118d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612644576126436125ca565b5b828201905092915050565b61265881611a29565b82525050565b61266781611ad1565b82525050565b612676816118d9565b82525050565b61268581611a09565b82525050565b610100820160008201516126a2600085018261264f565b5060208201516126b5602085018261264f565b5060408201516126c8604085018261265e565b5060608201516126db606085018261264f565b5060808201516126ee608085018261266d565b5060a082015161270160a085018261266d565b5060c082015161271460c085018261266d565b5060e082015161272760e085018261267c565b50505050565b600061010082019050612743600083018461268b565b92915050565b600060408201905061275e6000830185611a3b565b61276b60208301846118e3565b9392505050565b6000815190506127818161220e565b92915050565b60006020828403121561279d5761279c61181d565b5b60006127ab84828501612772565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612810602a8361251c565b915061281b826127b4565b604082019050919050565b6000602082019050818103600083015261283f81612803565b9050919050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b600061287c601b8361251c565b915061288782612846565b602082019050919050565b600060208201905081810360008301526128ab8161286f565b9050919050565b60006128bd826118d9565b91506128c8836118d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612901576129006125ca565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612946826118d9565b9150612951836118d9565b9250826129615761296061290c565b5b828204905092915050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b60006129c860218361251c565b91506129d38261296c565b604082019050919050565b600060208201905081810360008301526129f7816129bb565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612a3a612a35612a30846129fe565b612a15565b612a08565b9050919050565b612a4a81612a1f565b82525050565b6000604082019050612a656000830185611a3b565b612a726020830184612a41565b9392505050565b6000612a84826118d9565b9150612a8f836118d9565b925082821015612aa257612aa16125ca565b5b828203905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612ae3601d8361251c565b9150612aee82612aad565b602082019050919050565b60006020820190508181036000830152612b1281612ad6565b905091905056fe756e6f7377617028616464726573732c75696e743235362c75696e743235362c627974657333325b5d297377617028616464726573732c28616464726573732c616464726573732c616464726573732c616464726573732c75696e743235362c75696e743235362c75696e743235362c6279746573292c627974657329756e69737761705633537761702875696e743235362c75696e743235362c75696e743235365b5d29a264697066735822122001f4384fafd3c8e81eb8720e684d0b20f213f270c801ee5f59846660ec71ebed64736f6c634300080f0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063531aa03e11610071578063531aa03e146101b357806395e911a8146101e3578063a001c36714610201578063b5217bb41461021d578063cd705de31461024d578063f19e207e14610269576100b4565b80631f3de395146100b9578063230ed44a146100e95780632b5e4aab146101195780632c8354921461014957806342b53e5f146101795780635207ce8214610195575b600080fd5b6100d360048036038101906100ce919061188c565b610299565b6040516100e091906118f2565b60405180910390f35b61010360048036038101906100fe9190611939565b61044d565b6040516101109190611981565b60405180910390f35b610133600480360381019061012e9190611939565b61046d565b6040516101409190611981565b60405180910390f35b610163600480360381019061015e91906119c0565b610497565b60405161017091906118f2565b60405180910390f35b610193600480360381019061018e9190611939565b61071f565b005b61019d61086a565b6040516101aa9190611a4a565b60405180910390f35b6101cd60048036038101906101c89190611a91565b61088e565b6040516101da9190611aef565b60405180910390f35b6101eb610902565b6040516101f891906118f2565b60405180910390f35b61021b60048036038101906102169190611939565b610908565b005b61023760048036038101906102329190611b40565b610997565b6040516102449190611aef565b60405180910390f35b61026760048036038101906102629190611b99565b6109b9565b005b610283600480360381019061027e9190611bec565b610af1565b6040516102909190611981565b60405180910390f35b600080604051806060016040528060288152602001612b9760289139905060006040518060600160405280602a8152602001612b1a602a913990506000604051806080016040528060538152602001612b4460539139905060048686905010156103095760009350505050610447565b6000868660009060049261031f93929190611c23565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905061036e8185610b11565b156103a95760008060008989600490809261038b93929190611c23565b8101906103989190611dad565b925092509250819750505050610442565b6103b38184610b11565b156103f2576000806000808a8a60049080926103d193929190611c23565b8101906103de9190611f1d565b935093509350935081985050505050610441565b6103fc8183610b11565b1561043b5760008060008989600490809261041993929190611c23565b8101906104269190612183565b9250925092508160a001519750505050610440565b600094505b5b5b505050505b92915050565b60016020528060005260406000206000915054906101000a900460ff1681565b60006001600083815260200190815260200160002060009054906101000a900460ff169050919050565b60006104dc333084604001358560000160208101906104b69190611bec565b73ffffffffffffffffffffffffffffffffffffffff16610b71909392919063ffffffff16565b6000826040013590508260c00160208101906104f8919061223a565b15610525576105228360000160208101906105139190611bec565b84604001358560800135610bfa565b90505b600061055b84600001602081019061053d9190611bec565b8560200160208101906105509190611bec565b848760600135610d6a565b90506000610577858060a001906105729190612276565b610299565b9050818111156105c4578085606001356040517f9061b0fc0000000000000000000000000000000000000000000000000000000081526004016105bb9291906122d9565b60405180910390fd5b8460c00160208101906105d7919061223a565b6105ff576105fc8560200160208101906105f19190611bec565b838760800135610bfa565b91505b60008560000160208101906106149190611bec565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161064c9190611a4a565b602060405180830381865afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d9190612317565b905060008111156106d6576106d533828860000160208101906106b09190611bec565b73ffffffffffffffffffffffffffffffffffffffff1661113e9092919063ffffffff16565b5b61071333848860200160208101906106ee9190611bec565b73ffffffffffffffffffffffffffffffffffffffff1661113e9092919063ffffffff16565b82945050505050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107a2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060009054906101000a900460ff1661080457806040517f095f4a510000000000000000000000000000000000000000000000000000000081526004016107fb91906118f2565b60405180910390fd5b60006001600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2b4584016031d9a0d1fc722a5f384f606370058bfcc1354c24264dbd139d67da8160405161085f91906118f2565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806003600085856040516020016108a892919061238c565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900462ffffff16905060008162ffffff1611156108f557809150506108fc565b610bb89150505b92915050565b61271081565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661098b576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610994816111c4565b50565b60036020528060005260406000206000915054906101000a900462ffffff1681565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a3c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008585604051602001610a5492919061238c565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548162ffffff021916908362ffffff16021790555080600360008486604051602001610aac92919061238c565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548162ffffff021916908362ffffff160217905550505050565b60026020528060005260406000206000915054906101000a900460ff1681565b60008180519060200120604051602001610b2b9190612405565b6040516020818303038152906040528051906020012083604051602001610b52919061249a565b6040516020818303038152906040528051906020012014905092915050565b610bf4846323b872dd60e01b858585604051602401610b92939291906124b1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061128c565b50505050565b600080610c068361046d565b905080610c4a57826040517f095f4a51000000000000000000000000000000000000000000000000000000008152600401610c4191906118f2565b60405180910390fd5b6000610c85610c646127108661135390919063ffffffff16565b610c7786886113b190919063ffffffff16565b61142b90919063ffffffff16565b90506000841115610d4c57610cdb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828873ffffffffffffffffffffffffffffffffffffffff1661113e9092919063ffffffff16565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4756ac0011cd274810feab06c84b22207f6cf4374017214d7edbb4793e01b1dc8288604051610d439291906124e8565b60405180910390a25b610d5f818661147590919063ffffffff16565b925050509392505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280600d81526020017f556e6973776170526f75746572000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610dfb9190612566565b602060405180830381865afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c919061259d565b9050610e6981858873ffffffffffffffffffffffffffffffffffffffff166114bf9092919063ffffffff16565b6000610e75878761088e565b90508173ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001600f42610f0b91906125f9565b8152602001888152602001878152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610f53919061272d565b6020604051808303816000875af1158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f969190612317565b508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fd09190611a4a565b602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190612317565b92506000830361104d576040517f81ceff3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fcfe2b36dff205c560fb985b2c9220458365fa2dcafb12305e0c565e84b84255b848460405161107e9291906122d9565b60405180910390a1838310156110cd5783836040517f9061b0fc0000000000000000000000000000000000000000000000000000000081526004016110c49291906122d9565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f945805326745354040d87a85082ddbf37400ed05d6ffe9ae1452b4c5cfe29883878660405161112c9291906122d9565b60405180910390a35050949350505050565b6111bf8363a9059cbb60e01b848460405160240161115d929190612749565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061128c565b505050565b6001600082815260200190815260200160002060009054906101000a900460ff161561122757806040517f4552f1cf00000000000000000000000000000000000000000000000000000000815260040161121e91906118f2565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a7509338160405161128191906118f2565b60405180910390a150565b60006112ee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115c79092919063ffffffff16565b905060008151111561134e578080602001905181019061130e9190612787565b61134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134490612826565b60405180910390fd5b5b505050565b600080828461136291906125f9565b9050838110156113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e90612892565b60405180910390fd5b8091505092915050565b60008083036113c35760009050611425565b600082846113d191906128b2565b90508284826113e0919061293b565b14611420576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611417906129de565b60405180910390fd5b809150505b92915050565b600061146d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115df565b905092915050565b60006114b783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611642565b905092915050565b6115418363095ea7b360e01b8460006040516024016114df929190612a50565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061128c565b6115c28363095ea7b360e01b8484604051602401611560929190612749565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061128c565b505050565b60606115d684846000856116a6565b90509392505050565b60008083118290611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d9190612566565b60405180910390fd5b5060008385611635919061293b565b9050809150509392505050565b600083831115829061168a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116819190612566565b60405180910390fd5b50600083856116999190612a79565b9050809150509392505050565b60606116b1856117c8565b6116f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e790612af9565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611719919061249a565b60006040518083038185875af1925050503d8060008114611756576040519150601f19603f3d011682016040523d82523d6000602084013e61175b565b606091505b509150915081156117705780925050506117c0565b6000815111156117835780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b79190612566565b60405180910390fd5b949350505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561180a57506000801b8214155b92505050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261184c5761184b611827565b5b8235905067ffffffffffffffff8111156118695761186861182c565b5b60208301915083600182028301111561188557611884611831565b5b9250929050565b600080602083850312156118a3576118a261181d565b5b600083013567ffffffffffffffff8111156118c1576118c0611822565b5b6118cd85828601611836565b92509250509250929050565b6000819050919050565b6118ec816118d9565b82525050565b600060208201905061190760008301846118e3565b92915050565b611916816118d9565b811461192157600080fd5b50565b6000813590506119338161190d565b92915050565b60006020828403121561194f5761194e61181d565b5b600061195d84828501611924565b91505092915050565b60008115159050919050565b61197b81611966565b82525050565b60006020820190506119966000830184611972565b92915050565b600080fd5b600060e082840312156119b7576119b661199c565b5b81905092915050565b6000602082840312156119d6576119d561181d565b5b600082013567ffffffffffffffff8111156119f4576119f3611822565b5b611a00848285016119a1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a3482611a09565b9050919050565b611a4481611a29565b82525050565b6000602082019050611a5f6000830184611a3b565b92915050565b611a6e81611a29565b8114611a7957600080fd5b50565b600081359050611a8b81611a65565b92915050565b60008060408385031215611aa857611aa761181d565b5b6000611ab685828601611a7c565b9250506020611ac785828601611a7c565b9150509250929050565b600062ffffff82169050919050565b611ae981611ad1565b82525050565b6000602082019050611b046000830184611ae0565b92915050565b6000819050919050565b611b1d81611b0a565b8114611b2857600080fd5b50565b600081359050611b3a81611b14565b92915050565b600060208284031215611b5657611b5561181d565b5b6000611b6484828501611b2b565b91505092915050565b611b7681611ad1565b8114611b8157600080fd5b50565b600081359050611b9381611b6d565b92915050565b600080600060608486031215611bb257611bb161181d565b5b6000611bc086828701611a7c565b9350506020611bd186828701611a7c565b9250506040611be286828701611b84565b9150509250925092565b600060208284031215611c0257611c0161181d565b5b6000611c1084828501611a7c565b91505092915050565b600080fd5b600080fd5b60008085851115611c3757611c36611c19565b5b83861115611c4857611c47611c1e565b5b6001850283019150848603905094509492505050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ca782611c5e565b810181811067ffffffffffffffff82111715611cc657611cc5611c6f565b5b80604052505050565b6000611cd9611813565b9050611ce58282611c9e565b919050565b600067ffffffffffffffff821115611d0557611d04611c6f565b5b602082029050602081019050919050565b6000611d29611d2484611cea565b611ccf565b90508083825260208201905060208402830185811115611d4c57611d4b611831565b5b835b81811015611d755780611d618882611924565b845260208401935050602081019050611d4e565b5050509392505050565b600082601f830112611d9457611d93611827565b5b8135611da4848260208601611d16565b91505092915050565b600080600060608486031215611dc657611dc561181d565b5b6000611dd486828701611924565b9350506020611de586828701611924565b925050604084013567ffffffffffffffff811115611e0657611e05611822565b5b611e1286828701611d7f565b9150509250925092565b6000611e2782611a09565b9050919050565b611e3781611e1c565b8114611e4257600080fd5b50565b600081359050611e5481611e2e565b92915050565b600067ffffffffffffffff821115611e7557611e74611c6f565b5b602082029050602081019050919050565b6000611e99611e9484611e5a565b611ccf565b90508083825260208201905060208402830185811115611ebc57611ebb611831565b5b835b81811015611ee55780611ed18882611b2b565b845260208401935050602081019050611ebe565b5050509392505050565b600082601f830112611f0457611f03611827565b5b8135611f14848260208601611e86565b91505092915050565b60008060008060808587031215611f3757611f3661181d565b5b6000611f4587828801611e45565b9450506020611f5687828801611924565b9350506040611f6787828801611924565b925050606085013567ffffffffffffffff811115611f8857611f87611822565b5b611f9487828801611eef565b91505092959194509250565b600080fd5b600080fd5b6000611fb582611a29565b9050919050565b611fc581611faa565b8114611fd057600080fd5b50565b600081359050611fe281611fbc565b92915050565b600080fd5b600067ffffffffffffffff82111561200857612007611c6f565b5b61201182611c5e565b9050602081019050919050565b82818337600083830152505050565b600061204061203b84611fed565b611ccf565b90508281526020810184848401111561205c5761205b611fe8565b5b61206784828561201e565b509392505050565b600082601f83011261208457612083611827565b5b813561209484826020860161202d565b91505092915050565b600061010082840312156120b4576120b3611fa0565b5b6120bf610100611ccf565b905060006120cf84828501611fd3565b60008301525060206120e384828501611fd3565b60208301525060406120f784828501611e45565b604083015250606061210b84828501611e45565b606083015250608061211f84828501611924565b60808301525060a061213384828501611924565b60a08301525060c061214784828501611924565b60c08301525060e082013567ffffffffffffffff81111561216b5761216a611fa5565b5b6121778482850161206f565b60e08301525092915050565b60008060006060848603121561219c5761219b61181d565b5b60006121aa86828701611e45565b935050602084013567ffffffffffffffff8111156121cb576121ca611822565b5b6121d78682870161209d565b925050604084013567ffffffffffffffff8111156121f8576121f7611822565b5b6122048682870161206f565b9150509250925092565b61221781611966565b811461222257600080fd5b50565b6000813590506122348161220e565b92915050565b6000602082840312156122505761224f61181d565b5b600061225e84828501612225565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261229357612292612267565b5b80840192508235915067ffffffffffffffff8211156122b5576122b461226c565b5b6020830192506001820236038313156122d1576122d0612271565b5b509250929050565b60006040820190506122ee60008301856118e3565b6122fb60208301846118e3565b9392505050565b6000815190506123118161190d565b92915050565b60006020828403121561232d5761232c61181d565b5b600061233b84828501612302565b91505092915050565b60008160601b9050919050565b600061235c82612344565b9050919050565b600061236e82612351565b9050919050565b61238661238182611a29565b612363565b82525050565b60006123988285612375565b6014820191506123a88284612375565b6014820191508190509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6123ff6123fa826123b8565b6123e4565b82525050565b600061241182846123ee565b60048201915081905092915050565b600081519050919050565b600081905092915050565b60005b83811015612454578082015181840152602081019050612439565b83811115612463576000848401525b50505050565b600061247482612420565b61247e818561242b565b935061248e818560208601612436565b80840191505092915050565b60006124a68284612469565b915081905092915050565b60006060820190506124c66000830186611a3b565b6124d36020830185611a3b565b6124e060408301846118e3565b949350505050565b60006040820190506124fd60008301856118e3565b61250a6020830184611a3b565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061253882612511565b612542818561251c565b9350612552818560208601612436565b61255b81611c5e565b840191505092915050565b60006020820190508181036000830152612580818461252d565b905092915050565b60008151905061259781611a65565b92915050565b6000602082840312156125b3576125b261181d565b5b60006125c184828501612588565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612604826118d9565b915061260f836118d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612644576126436125ca565b5b828201905092915050565b61265881611a29565b82525050565b61266781611ad1565b82525050565b612676816118d9565b82525050565b61268581611a09565b82525050565b610100820160008201516126a2600085018261264f565b5060208201516126b5602085018261264f565b5060408201516126c8604085018261265e565b5060608201516126db606085018261264f565b5060808201516126ee608085018261266d565b5060a082015161270160a085018261266d565b5060c082015161271460c085018261266d565b5060e082015161272760e085018261267c565b50505050565b600061010082019050612743600083018461268b565b92915050565b600060408201905061275e6000830185611a3b565b61276b60208301846118e3565b9392505050565b6000815190506127818161220e565b92915050565b60006020828403121561279d5761279c61181d565b5b60006127ab84828501612772565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612810602a8361251c565b915061281b826127b4565b604082019050919050565b6000602082019050818103600083015261283f81612803565b9050919050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b600061287c601b8361251c565b915061288782612846565b602082019050919050565b600060208201905081810360008301526128ab8161286f565b9050919050565b60006128bd826118d9565b91506128c8836118d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612901576129006125ca565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612946826118d9565b9150612951836118d9565b9250826129615761296061290c565b5b828204905092915050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b60006129c860218361251c565b91506129d38261296c565b604082019050919050565b600060208201905081810360008301526129f7816129bb565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612a3a612a35612a30846129fe565b612a15565b612a08565b9050919050565b612a4a81612a1f565b82525050565b6000604082019050612a656000830185611a3b565b612a726020830184612a41565b9392505050565b6000612a84826118d9565b9150612a8f836118d9565b925082821015612aa257612aa16125ca565b5b828203905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612ae3601d8361251c565b9150612aee82612aad565b602082019050919050565b60006020820190508181036000830152612b1281612ad6565b905091905056fe756e6f7377617028616464726573732c75696e743235362c75696e743235362c627974657333325b5d297377617028616464726573732c28616464726573732c616464726573732c616464726573732c616464726573732c75696e743235362c75696e743235362c75696e743235362c6279746573292c627974657329756e69737761705633537761702875696e743235362c75696e743235362c75696e743235365b5d29a264697066735822122001f4384fafd3c8e81eb8720e684d0b20f213f270c801ee5f59846660ec71ebed64736f6c634300080f0033","abi":[{"inputs":[{"internalType":"address","name":"authorisedCaller","type":"address"},{"internalType":"address","name":"feeBeneficiary","type":"address"},{"internalType":"uint256","name":"_initialFee","type":"uint256"},{"internalType":"address","name":"_registry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierAlreadyExists","type":"error"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierDoesNotExist","type":"error"},{"inputs":[{"internalType":"uint256","name":"receiveAtLeast","type":"uint256"},{"internalType":"uint256","name":"received","type":"uint256"}],"name":"ReceivedLess","type":"error"},{"inputs":[],"name":"SwapFailed","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"assetIn","type":"address"},{"indexed":true,"internalType":"address","name":"assetOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"AssetSwap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beneficiary","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"FeePaid","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"minimumPossible","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualAmount","type":"uint256"}],"name":"SlippageSaved","type":"event"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"addFeeTier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorizedAddresses","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"withData","type":"bytes"}],"name":"decodeOneInchCallData","outputs":[{"internalType":"uint256","name":"minReturn","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"feeBase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeBeneficiaryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"feeTiers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"address","name":"toToken","type":"address"}],"name":"getPool","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"pools","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"removeFeeTier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint24","name":"pool","type":"uint24"}],"name":"setPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"fromAsset","type":"address"},{"internalType":"address","name":"toAsset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"receiveAtLeast","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"withData","type":"bytes"},{"internalType":"bool","name":"collectFeeInFromToken","type":"bool"}],"internalType":"struct SwapData","name":"swapData","type":"tuple"}],"name":"swapTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"feeId","type":"uint256"}],"name":"verifyFee","outputs":[{"internalType":"bool","name":"valid","type":"bool"}],"stateMutability":"view","type":"function"}]}