{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.15\"},\"sources\":{\"contracts/core/OperationExecutor.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.15;\\n\\nimport { ServiceRegistry } from \\\"./ServiceRegistry.sol\\\";\\nimport { OperationStorage } from \\\"./OperationStorage.sol\\\";\\nimport { OperationsRegistry } from \\\"./OperationsRegistry.sol\\\";\\nimport { DSProxy } from \\\"../libs/DS/DSProxy.sol\\\";\\nimport { ActionAddress } from \\\"../libs/ActionAddress.sol\\\";\\nimport { TakeFlashloan } from \\\"../actions/common/TakeFlashloan.sol\\\";\\nimport { Executable } from \\\"../actions/common/Executable.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../interfaces/flashloan/IERC3156FlashBorrower.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../interfaces/flashloan/IERC3156FlashLender.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"../libs/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"../libs/SafeMath.sol\\\";\\nimport { FlashloanData, Call } from \\\"./types/Common.sol\\\";\\nimport { OPERATION_STORAGE, OPERATIONS_REGISTRY, OPERATION_EXECUTOR } from \\\"./constants/Common.sol\\\";\\nimport { FLASH_MINT_MODULE } from \\\"./constants/Maker.sol\\\";\\n\\n/**\\n * @title Operation Executor\\n * @notice Is responsible for executing sequences of Actions (Operations)\\n */\\ncontract OperationExecutor is IERC3156FlashBorrower {\\n  using ActionAddress for address;\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  ServiceRegistry public immutable registry;\\n\\n  /**\\n   * @dev Emitted once an Operation has completed execution\\n   * @param name The address initiating the deposit\\n   * @param calls An array of Action calls the operation must execute\\n   **/\\n  event Operation(string indexed name, Call[] calls);\\n\\n  constructor(ServiceRegistry _registry) {\\n    registry = _registry;\\n  }\\n\\n  /**\\n   * @notice Executes an operation\\n   * @dev\\n   * There are operations stored in the OperationsRegistry which guarantee the order of execution of actions for a given Operation.\\n   * There is a possibility to execute an arrays of calls that don't form an official operation.\\n   *\\n   * Operation storage is cleared before and after an operation is executed.\\n   *\\n   * To avoid re-entrancy attack, there is a lock implemented on OpStorage.\\n   * A standard reentrancy modifier is not sufficient because the second call via the onFlashloan handler\\n   * calls aggregateCallback via DSProxy once again but this breaks the special modifier _ behaviour\\n   * and the modifier cannot return the execution flow to the original function.\\n   * This is why re-entrancy defence is immplemented here using an external storage contract via the lock/unlock functions\\n   * @param calls An array of Action calls the operation must execute\\n   * @param operationName The name of the Operation being executed\\n   */\\n  function executeOp(Call[] memory calls, string calldata operationName) public payable {\\n    OperationStorage opStorage = OperationStorage(registry.getRegisteredService(OPERATION_STORAGE));\\n    opStorage.lock();\\n    OperationsRegistry opRegistry = OperationsRegistry(\\n      registry.getRegisteredService(OPERATIONS_REGISTRY)\\n    );\\n\\n    opStorage.clearStorage();\\n    (bytes32[] memory actions, bool[] memory optional) = opRegistry.getOperation(operationName);\\n    opStorage.setOperationActions(actions, optional);\\n    aggregate(calls);\\n\\n    opStorage.clearStorage();\\n    opStorage.unlock();\\n    emit Operation(operationName, calls);\\n  }\\n\\n  function aggregate(Call[] memory calls) internal {\\n    OperationStorage opStorage = OperationStorage(registry.getRegisteredService(OPERATION_STORAGE));\\n    bool hasActionsToVerify = opStorage.hasActionsToVerify();\\n    for (uint256 current = 0; current < calls.length; current++) {\\n      if (hasActionsToVerify) {\\n        opStorage.verifyAction(calls[current].targetHash, calls[current].skipped);\\n      }\\n      if (!calls[current].skipped) {\\n        address target = registry.getServiceAddress(calls[current].targetHash);\\n        target.execute(calls[current].callData);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Not to be called directly\\n   * @dev Is called by the Operation Executor via a user's proxy to execute Actions nested in the FlashloanAction\\n   * @param calls An array of Action calls the operation must execute\\n   */\\n  function callbackAggregate(Call[] memory calls) external {\\n    require(\\n      msg.sender == registry.getRegisteredService(OPERATION_EXECUTOR),\\n      \\\"OpExecutor: Caller forbidden\\\"\\n    );\\n    aggregate(calls);\\n  }\\n\\n  /**\\n   * @notice Not to be called directly.\\n   * @dev Callback handler for use by a flashloan lender contract.\\n   * If the dsProxyFlashloan flag is supplied we reestablish the calling context as the user's proxy (at time of writing DSProxy). Although stored values will\\n   * We set the initiator on Operation Storage such that calls originating from other contracts EG Oasis Automation Bot (see https://github.com/OasisDEX/automation-smartcontracts)\\n   * The initiator address will be used to store values against the original msg.sender.\\n   * This protects against the Operation Storage values being polluted by malicious code from untrusted 3rd party contracts.\\n\\n   * @param initiator Is the address of the contract that initiated the flashloan (EG Operation Executor)\\n   * @param asset The address of the asset being flash loaned\\n   * @param amount The size of the flash loan\\n   * @param fee The Fee charged for the loan\\n   * @param data Any calldata sent to the contract for execution later in the callback\\n   */\\n  function onFlashLoan(\\n    address initiator,\\n    address asset,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata data\\n  ) external override returns (bytes32) {\\n    address lender = registry.getRegisteredService(FLASH_MINT_MODULE);\\n\\n    require(msg.sender == lender, \\\"Untrusted flashloan lender\\\");\\n\\n    FlashloanData memory flData = abi.decode(data, (FlashloanData));\\n\\n    require(IERC20(asset).balanceOf(address(this)) >= flData.amount, \\\"Flashloan inconsistency\\\");\\n\\n    if (flData.dsProxyFlashloan) {\\n      IERC20(asset).safeTransfer(initiator, flData.amount);\\n\\n      DSProxy(payable(initiator)).execute(\\n        address(this),\\n        abi.encodeWithSelector(this.callbackAggregate.selector, flData.calls)\\n      );\\n    } else {\\n      OperationStorage opStorage = OperationStorage(\\n        registry.getRegisteredService(OPERATION_STORAGE)\\n      );\\n      opStorage.setInitiator(initiator);\\n      aggregate(flData.calls);\\n    }\\n\\n    uint256 paybackAmount = amount.add(fee);\\n    require(\\n      IERC20(asset).balanceOf(address(this)) >= paybackAmount,\\n      \\\"Insufficient funds for payback\\\"\\n    );\\n\\n    IERC20(asset).safeApprove(lender, paybackAmount);\\n\\n    return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/DS/DSAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nabstract contract DSAuthority {\\n  function canCall(\\n    address src,\\n    address dst,\\n    bytes4 sig\\n  ) public view virtual returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/DS/DSAuth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./DSAuthority.sol\\\";\\n\\ncontract DSAuthEvents {\\n  event LogSetAuthority(address indexed authority);\\n  event LogSetOwner(address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n  DSAuthority public authority;\\n  address public owner;\\n\\n  constructor() {\\n    owner = msg.sender;\\n    emit LogSetOwner(msg.sender);\\n  }\\n\\n  function setOwner(address owner_) public auth {\\n    owner = owner_;\\n    emit LogSetOwner(owner);\\n  }\\n\\n  function setAuthority(DSAuthority authority_) public auth {\\n    authority = authority_;\\n    emit LogSetAuthority(address(authority));\\n  }\\n\\n  modifier auth() {\\n    require(isAuthorized(msg.sender, msg.sig), \\\"Not authorized\\\");\\n    _;\\n  }\\n\\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\n    if (src == address(this)) {\\n      return true;\\n    } else if (src == owner) {\\n      return true;\\n    } else if (authority == DSAuthority(address(0))) {\\n      return false;\\n    } else {\\n      return authority.canCall(src, address(this), sig);\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/DS/DSNote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ncontract DSNote {\\n  event LogNote(\\n    bytes4 indexed sig,\\n    address indexed guy,\\n    bytes32 indexed foo,\\n    bytes32 indexed bar,\\n    uint256 wad,\\n    bytes fax\\n  ) anonymous;\\n\\n  modifier note() {\\n    bytes32 foo;\\n    bytes32 bar;\\n\\n    assembly {\\n      foo := calldataload(4)\\n      bar := calldataload(36)\\n    }\\n\\n    emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\\n\\n    _;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/DS/DSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./DSAuth.sol\\\";\\nimport \\\"./DSNote.sol\\\";\\n\\nabstract contract DSProxy is DSAuth, DSNote {\\n  DSProxyCache public cache; // global cache for contracts\\n\\n  constructor(address _cacheAddr) {\\n    require(setCache(_cacheAddr), \\\"Cache not set\\\");\\n  }\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  // use the proxy to execute calldata _data on contract _code\\n  function execute(bytes memory _code, bytes memory _data)\\n    public\\n    payable\\n    virtual\\n    returns (address target, bytes32 response);\\n\\n  function execute(address _target, bytes memory _data)\\n    public\\n    payable\\n    virtual\\n    returns (bytes32 response);\\n\\n  //set new cache\\n  function setCache(address _cacheAddr) public payable virtual returns (bool);\\n}\\n\\ncontract DSProxyCache {\\n  mapping(bytes32 => address) cache;\\n\\n  function read(bytes memory _code) public view returns (address) {\\n    bytes32 hash = keccak256(_code);\\n    return cache[hash];\\n  }\\n\\n  function write(bytes memory _code) public returns (address target) {\\n    assembly {\\n      target := create(0, add(_code, 0x20), mload(_code))\\n      switch iszero(extcodesize(target))\\n      case 1 {\\n        // throw if contract failed to deploy\\n        revert(0, 0)\\n      }\\n    }\\n    bytes32 hash = keccak256(_code);\\n    cache[hash] = target;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/actions/common/Executable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Shared Action Executable interface\\n * @notice Provides a common interface for an execute method to all Action\\n */\\ninterface Executable {\\n  function execute(bytes calldata data, uint8[] memory paramsMap) external payable;\\n\\n  /**\\n   * @dev Emitted once an Action has completed execution\\n   * @param name The Action name\\n   * @param returned The bytes value returned by the Action\\n   **/\\n  event Action(string indexed name, bytes returned);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/libs/ActionAddress.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\nimport \\\"./Address.sol\\\";\\nimport \\\"../actions/common/Executable.sol\\\";\\n\\nlibrary ActionAddress {\\n  using Address for address;\\n\\n  function execute(address action, bytes memory callData) internal {\\n    require(isCallingAnExecutable(callData), \\\"OpExecutor: illegal call\\\");\\n    action.functionDelegateCall(callData, \\\"OpExecutor: low-level delegatecall failed\\\");\\n  }\\n\\n  function isCallingAnExecutable(bytes memory callData) private pure returns (bool) {\\n    bytes4 executeSelector = convertBytesToBytes4(\\n      abi.encodeWithSelector(Executable.execute.selector)\\n    );\\n    bytes4 selector = convertBytesToBytes4(callData);\\n    return selector == executeSelector;\\n  }\\n\\n  function convertBytesToBytes4(bytes memory inBytes) private pure returns (bytes4 outBytes4) {\\n    if (inBytes.length == 0) {\\n      return 0x0;\\n    }\\n\\n    assembly {\\n      outBytes4 := mload(add(inBytes, 32))\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/ServiceRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.1;\\n\\n/**\\n * @title Service Registry\\n * @notice Stores addresses of deployed contracts\\n */\\ncontract ServiceRegistry {\\n  uint256 public constant MAX_DELAY = 30 days;\\n\\n  mapping(bytes32 => uint256) public lastExecuted;\\n  mapping(bytes32 => address) private namedService;\\n  address public owner;\\n  uint256 public requiredDelay;\\n\\n  modifier validateInput(uint256 len) {\\n    require(msg.data.length == len, \\\"registry/illegal-padding\\\");\\n    _;\\n  }\\n\\n  modifier delayedExecution() {\\n    bytes32 operationHash = keccak256(msg.data);\\n    uint256 reqDelay = requiredDelay;\\n\\n    /* solhint-disable not-rely-on-time */\\n    if (lastExecuted[operationHash] == 0 && reqDelay > 0) {\\n      // not called before, scheduled for execution\\n      lastExecuted[operationHash] = block.timestamp;\\n      emit ChangeScheduled(operationHash, block.timestamp + reqDelay, msg.data);\\n    } else {\\n      require(block.timestamp - reqDelay > lastExecuted[operationHash], \\\"registry/delay-too-small\\\");\\n      emit ChangeApplied(operationHash, block.timestamp, msg.data);\\n      _;\\n      lastExecuted[operationHash] = 0;\\n    }\\n    /* solhint-enable not-rely-on-time */\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"registry/only-owner\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 initialDelay) {\\n    require(initialDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = initialDelay;\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @param newOwner Transfers ownership of the registry to a new address\\n   */\\n  function transferOwnership(address newOwner)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n    delayedExecution\\n  {\\n    owner = newOwner;\\n  }\\n\\n  /**\\n   * @param newDelay Updates the required delay before an change can be confirmed with a follow up t/x\\n   */\\n  function changeRequiredDelay(uint256 newDelay)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n    delayedExecution\\n  {\\n    require(newDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = newDelay;\\n  }\\n\\n  /**\\n   * @param name Hashes the supplied name\\n   * @return Returns the hash of the name\\n   */\\n  function getServiceNameHash(string memory name) external pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed name\\n   * @param serviceAddress The address stored for a given name\\n   */\\n  function addNamedService(bytes32 serviceNameHash, address serviceAddress)\\n    external\\n    onlyOwner\\n    validateInput(68)\\n    delayedExecution\\n  {\\n    require(namedService[serviceNameHash] == address(0), \\\"registry/service-override\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed name\\n   * @param serviceAddress The address to update for a given name\\n   */\\n  function updateNamedService(bytes32 serviceNameHash, address serviceAddress)\\n    external\\n    onlyOwner\\n    validateInput(68)\\n    delayedExecution\\n  {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n  }\\n\\n  /**\\n   * @param serviceNameHash The hashed service name to remove\\n   */\\n  function removeNamedService(bytes32 serviceNameHash) external onlyOwner validateInput(36) {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = address(0);\\n    emit NamedServiceRemoved(serviceNameHash);\\n  }\\n\\n  /**\\n   * @param serviceName Get a service address by its name\\n   */\\n  function getRegisteredService(string memory serviceName) external view returns (address) {\\n    return namedService[keccak256(abi.encodePacked(serviceName))];\\n  }\\n\\n  /**\\n   * @param serviceNameHash Get a service address by the hash of its name\\n   */\\n  function getServiceAddress(bytes32 serviceNameHash) external view returns (address) {\\n    return namedService[serviceNameHash];\\n  }\\n\\n  /**\\n   * @dev Voids any submitted changes that are yet to be confirmed by a follow-up transaction\\n   * @param scheduledExecution Clear any scheduled changes\\n   */\\n  function clearScheduledExecution(bytes32 scheduledExecution)\\n    external\\n    onlyOwner\\n    validateInput(36)\\n  {\\n    require(lastExecuted[scheduledExecution] > 0, \\\"registry/execution-not-scheduled\\\");\\n    lastExecuted[scheduledExecution] = 0;\\n    emit ChangeCancelled(scheduledExecution);\\n  }\\n\\n  event ChangeScheduled(bytes32 dataHash, uint256 scheduledFor, bytes data);\\n  event ChangeApplied(bytes32 dataHash, uint256 appliedAt, bytes data);\\n  event ChangeCancelled(bytes32 dataHash);\\n  event NamedServiceRemoved(bytes32 nameHash);\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/interfaces/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC3156FlashBorrower {\\n  /**\\n   * @dev Receive a flash loan.\\n   * @param initiator The initiator of the loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param fee The additional amount of tokens to repay.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n   */\\n  function onFlashLoan(\\n    address initiator,\\n    address token,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata data\\n  ) external returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/flashloan/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n  /**\\n   * @dev The amount of currency available to be lent.\\n   * @param token The loan currency.\\n   * @return The amount of `token` that can be borrowed.\\n   */\\n  function maxFlashLoan(address token) external view returns (uint256);\\n\\n  /**\\n   * @dev The fee to be charged for a given loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n   */\\n  function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n  /**\\n   * @dev Initiate a flash loan.\\n   * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   */\\n  function flashLoan(\\n    IERC3156FlashBorrower receiver,\\n    address token,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  bool dsProxyFlashloan;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  address proxyAddress;\\n  uint256 positionId;\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10**27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant PULL_TOKEN_ACTION = \\\"PullToken_3\\\";\\nstring constant SEND_TOKEN_ACTION = \\\"SendToken_3\\\";\\nstring constant SET_APPROVAL_ACTION = \\\"SetApproval_3\\\";\\nstring constant TAKE_FLASH_LOAN_ACTION = \\\"TakeFlashloan_3\\\";\\nstring constant WRAP_ETH = \\\"WrapEth_3\\\";\\nstring constant UNWRAP_ETH = \\\"UnwrapEth_3\\\";\\nstring constant RETURN_FUNDS_ACTION = \\\"ReturnFunds_3\\\";\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Maker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant FLASH_MINT_MODULE = \\\"McdFlashMintModule\\\";\\n\\nstring constant OPEN_VAULT_ACTION = \\\"MakerOpenVault\\\";\\nstring constant DEPOSIT_ACTION = \\\"MakerDeposit\\\";\\nstring constant GENERATE_ACTION = \\\"MakerGenerate\\\";\\nstring constant PAYBACK_ACTION = \\\"MakerPayback\\\";\\nstring constant WITHDRAW_ACTION = \\\"MakerWithdraw\\\";\\n\\nstring constant MCD_MANAGER = \\\"McdManager\\\";\\nstring constant MCD_JUG = \\\"McdJug\\\";\\nstring constant MCD_JOIN_DAI = \\\"McdJoinDai\\\";\\nstring constant CDP_ALLOW = \\\"MakerCdpAllow\\\";\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/DS/DSGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nabstract contract DSGuard {\\n  function canCall(\\n    address src_,\\n    address dst_,\\n    bytes4 sig\\n  ) public view virtual returns (bool);\\n\\n  function permit(\\n    bytes32 src,\\n    bytes32 dst,\\n    bytes32 sig\\n  ) public virtual;\\n\\n  function forbid(\\n    bytes32 src,\\n    bytes32 dst,\\n    bytes32 sig\\n  ) public virtual;\\n\\n  function permit(\\n    address src,\\n    address dst,\\n    bytes32 sig\\n  ) public virtual;\\n\\n  function forbid(\\n    address src,\\n    address dst,\\n    bytes32 sig\\n  ) public virtual;\\n}\\n\\nabstract contract DSGuardFactory {\\n  function newGuard() public virtual returns (DSGuard guard);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/DS/ProxyPermission.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./DSGuard.sol\\\";\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract ProxyPermission {\\n  address internal constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\\n\\n  bytes4 public constant ALLOWED_METHOD_HASH = bytes4(keccak256(\\\"execute(address,bytes)\\\"));\\n\\n  function givePermission(address _contractAddr) public {\\n    address currAuthority = address(DSAuth(address(this)).authority());\\n    DSGuard guard = DSGuard(currAuthority);\\n\\n    if (currAuthority == address(0)) {\\n      guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\\n      DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\\n    }\\n\\n    if (!guard.canCall(_contractAddr, address(this), ALLOWED_METHOD_HASH)) {\\n      guard.permit(_contractAddr, address(this), ALLOWED_METHOD_HASH);\\n    }\\n  }\\n\\n  function removePermission(address _contractAddr) public {\\n    address currAuthority = address(DSAuth(address(this)).authority());\\n\\n    if (currAuthority == address(0)) {\\n      return;\\n    }\\n\\n    DSGuard guard = DSGuard(currAuthority);\\n    guard.forbid(_contractAddr, address(this), ALLOWED_METHOD_HASH);\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/actions/common/TakeFlashloan.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Executable } from \\\"../common/Executable.sol\\\";\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../../interfaces/flashloan/IERC3156FlashBorrower.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../../interfaces/flashloan/IERC3156FlashLender.sol\\\";\\nimport { FlashloanData } from \\\"../../core/types/Common.sol\\\";\\nimport { OPERATION_EXECUTOR, DAI, TAKE_FLASH_LOAN_ACTION } from \\\"../../core/constants/Common.sol\\\";\\nimport { FLASH_MINT_MODULE } from \\\"../../core/constants/Maker.sol\\\";\\nimport { ProxyPermission } from \\\"../../libs/DS/ProxyPermission.sol\\\";\\n\\n/**\\n * @title TakeFlashloan Action contract\\n * @notice Executes a sequence of Actions after flashloaning funds\\n */\\ncontract TakeFlashloan is Executable, ProxyPermission {\\n  ServiceRegistry internal immutable registry;\\n  address internal immutable dai;\\n\\n  constructor(ServiceRegistry _registry, address _dai) {\\n    registry = _registry;\\n    dai = _dai;\\n  }\\n\\n  /**\\n   * @dev When the Flashloan lender calls back the Operation Executor we may need to re-establish the calling context.\\n   * @dev The dsProxyFlashloan flag is used to give the Operation Executor temporary authority to call the execute method on a user's proxy\\n   * @param data Encoded calldata that conforms to the FlashloanData struct\\n   */\\n  function execute(bytes calldata data, uint8[] memory) external payable override {\\n    FlashloanData memory flData = parseInputs(data);\\n\\n    address operationExecutorAddress = registry.getRegisteredService(OPERATION_EXECUTOR);\\n\\n    if (flData.dsProxyFlashloan) {\\n      givePermission(operationExecutorAddress);\\n    }\\n\\n    IERC3156FlashLender(registry.getRegisteredService(FLASH_MINT_MODULE)).flashLoan(\\n      IERC3156FlashBorrower(operationExecutorAddress),\\n      dai,\\n      flData.amount,\\n      data\\n    );\\n\\n    if (flData.dsProxyFlashloan) {\\n      removePermission(operationExecutorAddress);\\n    }\\n\\n    emit Action(TAKE_FLASH_LOAN_ACTION, bytes(abi.encode(flData.amount)));\\n  }\\n\\n  function parseInputs(bytes memory _callData) public pure returns (FlashloanData memory params) {\\n    return abi.decode(_callData, (FlashloanData));\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/core/OperationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { ServiceRegistry } from \\\"./ServiceRegistry.sol\\\";\\n\\n/**\\n * @title Operation Storage\\n * @notice Stores the return values from Actions during an Operation's execution\\n * @dev valuesHolders is an array of t/x initiators (msg.sender) who have pushed values to Operation Storage\\n * returnValues is a mapping between a msg.sender and an array of Action return values generated by that senders transaction\\n */\\ncontract OperationStorage {\\n  uint8 internal action = 0;\\n  bytes32[] public actions;\\n  bool[] public optionals;\\n  mapping(address => bytes32[]) public returnValues;\\n  address[] public valuesHolders;\\n  bool private locked;\\n  address private whoLocked;\\n  address public initiator;\\n  address immutable operationExecutorAddress;\\n\\n  ServiceRegistry internal immutable registry;\\n\\n  constructor(ServiceRegistry _registry, address _operationExecutorAddress) {\\n    registry = _registry;\\n    operationExecutorAddress = _operationExecutorAddress;\\n  }\\n\\n  /**\\n   * @dev Locks storage to protect against re-entrancy attacks.@author\\n   */\\n  function lock() external {\\n    locked = true;\\n    whoLocked = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Only the original locker can unlock the contract at the end of the transaction\\n   */\\n  function unlock() external {\\n    require(whoLocked == msg.sender, \\\"Only the locker can unlock\\\");\\n    require(locked, \\\"Not locked\\\");\\n    locked = false;\\n    whoLocked = address(0);\\n  }\\n\\n  /**\\n   * @dev Sets the initiator of the original call\\n   * Is used by Automation Bot branch in the onFlashloan callback in Operation Executor\\n   * Ensures that third party calls to Operation Storage do not maliciously override values in Operation Storage\\n   * @param _initiator Sets the initiator to Operation Executor contract when storing return values from flashloan nested Action\\n   */\\n  function setInitiator(address _initiator) external {\\n    require(msg.sender == operationExecutorAddress);\\n    initiator = _initiator;\\n  }\\n\\n  /**\\n   * @param _actions Stores the Actions currently being executed for a given Operation and their optionality\\n   */\\n  function setOperationActions(bytes32[] memory _actions, bool[] memory _optionals) external {\\n    actions = _actions;\\n    optionals = _optionals;\\n  }\\n\\n  /**\\n   * @param actionHash Checks the current action has against the expected action hash\\n   */\\n  function verifyAction(bytes32 actionHash, bool skipped) external {\\n    if (skipped) {\\n      require(optionals[action], \\\"Action cannot be skipped\\\");\\n    }\\n    require(actions[action] == actionHash, \\\"incorrect-action\\\");\\n    registry.getServiceAddress(actionHash);\\n    action++;\\n  }\\n\\n  /**\\n   * @dev Custom operations have no Actions stored in Operation Registry\\n   * @return Returns true / false depending on whether the Operation has any actions to verify the Operation against\\n   */\\n  function hasActionsToVerify() external view returns (bool) {\\n    return actions.length > 0;\\n  }\\n\\n  /**\\n   * @param value Pushes a bytes32 to end of the returnValues array\\n   */\\n  function push(bytes32 value) external {\\n    address who = msg.sender;\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n\\n    if (returnValues[who].length == 0) {\\n      valuesHolders.push(who);\\n    }\\n    returnValues[who].push(value);\\n  }\\n\\n  /**\\n   * @dev Values are stored against an address (who)\\n   * This ensures that malicious actors looking to push values to Operation Storage mid transaction cannot overwrite values\\n   * @param index The index of the desired value\\n   * @param who The msg.sender address responsible for storing values\\n   */\\n  function at(uint256 index, address who) external view returns (bytes32) {\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n    return returnValues[who][index];\\n  }\\n\\n  /**\\n   * @param who The msg.sender address responsible for storing values\\n   * @return The length of return values stored against a given msg.sender address\\n   */\\n  function len(address who) external view returns (uint256) {\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n    return returnValues[who].length;\\n  }\\n\\n  /**\\n   * @dev Clears storage in preparation for the next Operation\\n   */\\n  function clearStorage() external {\\n    delete action;\\n    delete actions;\\n    for (uint256 i = 0; i < valuesHolders.length; i++) {\\n      delete returnValues[valuesHolders[i]];\\n    }\\n    delete valuesHolders;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/OperationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Operation } from \\\"./types/Common.sol\\\";\\nimport { OPERATIONS_REGISTRY } from \\\"./constants/Common.sol\\\";\\n\\nstruct StoredOperation {\\n  bytes32[] actions;\\n  bool[] optional;\\n  string name;\\n}\\n\\n/**\\n * @title Operation Registry\\n * @notice Stores the Actions that constitute a given Operation and information if an Action can be skipped\\n\\n */\\ncontract OperationsRegistry {\\n  mapping(string => StoredOperation) private operations;\\n  address public owner;\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"only-owner\\\");\\n    _;\\n  }\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @notice Stores the Actions that constitute a given Operation\\n   * @param newOwner The address of the new owner of the Operations Registry\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    owner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Emitted when a new operation is added or an existing operation is updated\\n   * @param name The Operation name\\n   **/\\n  event OperationAdded(string indexed name);\\n\\n  /**\\n   * @notice Adds an Operation's Actions keyed to a an operation name\\n   * @param operation Struct with Operation name, actions and their optionality\\n   */\\n  function addOperation(StoredOperation calldata operation) external onlyOwner {\\n    operations[operation.name] = operation;\\n    emit OperationAdded(operation.name);\\n  }\\n\\n  /**\\n   * @notice Gets an Operation from the Registry\\n   * @param name The name of the Operation\\n   * @return actions Returns an array of Actions and array for optionality of coresponding Actions\\n   */\\n  function getOperation(string memory name)\\n    external\\n    view\\n    returns (bytes32[] memory actions, bool[] memory optional)\\n  {\\n    if (keccak256(bytes(operations[name].name)) == keccak256(bytes(\\\"\\\"))) {\\n      revert(\\\"Operation doesn't exist\\\");\\n    }\\n    actions = operations[name].actions;\\n    optional = operations[name].optional;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"}}}","address":"0xa195ACcEB1945163160CD5703Ed43E4f78176a54","bytecode":"0x60a06040523480156200001157600080fd5b5060405162002e4238038062002e428339818101604052810190620000379190620000f0565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000122565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b6000620000b88262000097565b9050919050565b620000ca81620000ab565b8114620000d657600080fd5b50565b600081519050620000ea81620000bf565b92915050565b60006020828403121562000109576200010862000072565b5b60006200011984828501620000d9565b91505092915050565b608051612cd46200016e6000396000818160f601528181610440015281816106b9015281816106dd015281816108270152818161095a01528181610d290152610f4e0152612cd46000f3fe60806040526004361061003f5760003560e01c806323e30c8b146100445780637b10399914610081578063c8d78f52146100ac578063f1298ed7146100d5575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906117c7565b6100f1565b604051610078919061187a565b60405180910390f35b34801561008d57600080fd5b506100966106b7565b6040516100a391906118f4565b60405180910390f35b3480156100b857600080fd5b506100d360048036038101906100ce9190611c1f565b6106db565b005b6100ef60048036038101906100ea9190611cbe565b610823565b005b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280601281526020017f4d6364466c6173684d696e744d6f64756c6500000000000000000000000000008152506040518263ffffffff1660e01b81526004016101829190611dc2565b602060405180830381865afa15801561019f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c39190611df9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022a90611e72565b60405180910390fd5b600084848101906102449190611f12565b905080600001518873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102849190611f6a565b602060405180830381865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c59190611f9a565b1015610306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fd90612013565b60405180910390fd5b80602001511561043c5761033f8982600001518a73ffffffffffffffffffffffffffffffffffffffff16610c9f9092919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd3063c8d78f5260e01b846040015160405160240161037991906121b8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016103f3929190612224565b6020604051808303816000875af1158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190612269565b50610589565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280601281526020017f4f7065726174696f6e53746f726167655f3200000000000000000000000000008152506040518263ffffffff1660e01b81526004016104cc9190611dc2565b602060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d9190611df9565b90508073ffffffffffffffffffffffffffffffffffffffff1663d59dfd618b6040518263ffffffff1660e01b81526004016105489190611f6a565b600060405180830381600087803b15801561056257600080fd5b505af1158015610576573d6000803e3d6000fd5b505050506105878260400151610d25565b505b600061059e878961106890919063ffffffff16565b9050808973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105da9190611f6a565b602060405180830381865afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190611f9a565b101561065c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610653906122e2565b60405180910390fd5b61068783828b73ffffffffffffffffffffffffffffffffffffffff166110c69092919063ffffffff16565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd993505050509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280601381526020017f4f7065726174696f6e4578656375746f725f32000000000000000000000000008152506040518263ffffffff1660e01b81526004016107699190611dc2565b602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190611df9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e9061234e565b60405180910390fd5b61082081610d25565b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280601281526020017f4f7065726174696f6e53746f726167655f3200000000000000000000000000008152506040518263ffffffff1660e01b81526004016108b39190611dc2565b602060405180830381865afa1580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f49190611df9565b90508073ffffffffffffffffffffffffffffffffffffffff1663f83d08ba6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561093e57600080fd5b505af1158015610952573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280601481526020017f4f7065726174696f6e7352656769737472795f320000000000000000000000008152506040518263ffffffff1660e01b81526004016109e69190611dc2565b602060405180830381865afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190611df9565b90508173ffffffffffffffffffffffffffffffffffffffff166369bd38a06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a7157600080fd5b505af1158015610a85573d6000803e3d6000fd5b505050506000808273ffffffffffffffffffffffffffffffffffffffff16631fffb05c87876040518363ffffffff1660e01b8152600401610ac792919061239b565b600060405180830381865afa158015610ae4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b0d919061255a565b915091508373ffffffffffffffffffffffffffffffffffffffff166342a4b81183836040518363ffffffff1660e01b8152600401610b4c929190612730565b600060405180830381600087803b158015610b6657600080fd5b505af1158015610b7a573d6000803e3d6000fd5b50505050610b8787610d25565b8373ffffffffffffffffffffffffffffffffffffffff166369bd38a06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bcf57600080fd5b505af1158015610be3573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663a69df4b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c2f57600080fd5b505af1158015610c43573d6000803e3d6000fd5b505050508585604051610c57929190612797565b60405180910390207f9671a5bc81b8023e471acd3d9ca2209e5f01432f6fa36d5352c5e2f7aee89fc288604051610c8e91906121b8565b60405180910390a250505050505050565b610d208363a9059cbb60e01b8484604051602401610cbe9291906127bf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506111ce565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630851f3bd6040518060400160405280601281526020017f4f7065726174696f6e53746f726167655f3200000000000000000000000000008152506040518263ffffffff1660e01b8152600401610db59190611dc2565b602060405180830381865afa158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df69190611df9565b905060008173ffffffffffffffffffffffffffffffffffffffff16634b1824a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6991906127e8565b905060005b8351811015611062578115610f27578273ffffffffffffffffffffffffffffffffffffffff1663e7acf55a858381518110610eac57610eab612815565b5b602002602001015160000151868481518110610ecb57610eca612815565b5b6020026020010151604001516040518363ffffffff1660e01b8152600401610ef4929190612853565b600060405180830381600087803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b505050505b838181518110610f3a57610f39612815565b5b60200260200101516040015161104f5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c2527b32868481518110610f9b57610f9a612815565b5b6020026020010151600001516040518263ffffffff1660e01b8152600401610fc3919061187a565b602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190611df9565b905061104d85838151811061101c5761101b612815565b5b6020026020010151602001518273ffffffffffffffffffffffffffffffffffffffff1661129590919063ffffffff16565b505b808061105a906128ab565b915050610e6e565b50505050565b600080828461107791906128f3565b9050838110156110bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b390612995565b60405180910390fd5b8091505092915050565b6111488363095ea7b360e01b8460006040516024016110e69291906129fd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506111ce565b6111c98363095ea7b360e01b84846040516024016111679291906127bf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506111ce565b505050565b6000611230826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113259092919063ffffffff16565b9050600081511115611290578080602001905181019061125091906127e8565b61128f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128690612a98565b60405180910390fd5b5b505050565b61129e8161133d565b6112dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d490612b04565b60405180910390fd5b61132081604051806060016040528060298152602001612c76602991398473ffffffffffffffffffffffffffffffffffffffff1661140c9092919063ffffffff16565b505050565b6060611334848460008561152a565b90509392505050565b6000806113b36385e92d9860e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061164c565b905060006113c08461164c565b9050817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161492505050919050565b60606114178461166f565b611456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144d90612b96565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161147e9190612bf2565b600060405180830381855af49150503d80600081146114b9576040519150601f19603f3d011682016040523d82523d6000602084013e6114be565b606091505b509150915081156114d3578092505050611523565b6000815111156114e65780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151a9190611dc2565b60405180910390fd5b9392505050565b60606115358561166f565b611574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156b90612c55565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161159d9190612bf2565b60006040518083038185875af1925050503d80600081146115da576040519150601f19603f3d011682016040523d82523d6000602084013e6115df565b606091505b509150915081156115f4578092505050611644565b6000815111156116075780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163b9190611dc2565b60405180910390fd5b949350505050565b60008082510361166257600060e01b905061166a565b602082015190505b919050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91508082141580156116b157506000801b8214155b92505050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116f9826116ce565b9050919050565b611709816116ee565b811461171457600080fd5b50565b60008135905061172681611700565b92915050565b6000819050919050565b61173f8161172c565b811461174a57600080fd5b50565b60008135905061175c81611736565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261178757611786611762565b5b8235905067ffffffffffffffff8111156117a4576117a3611767565b5b6020830191508360018202830111156117c0576117bf61176c565b5b9250929050565b60008060008060008060a087890312156117e4576117e36116c4565b5b60006117f289828a01611717565b965050602061180389828a01611717565b955050604061181489828a0161174d565b945050606061182589828a0161174d565b935050608087013567ffffffffffffffff811115611846576118456116c9565b5b61185289828a01611771565b92509250509295509295509295565b6000819050919050565b61187481611861565b82525050565b600060208201905061188f600083018461186b565b92915050565b6000819050919050565b60006118ba6118b56118b0846116ce565b611895565b6116ce565b9050919050565b60006118cc8261189f565b9050919050565b60006118de826118c1565b9050919050565b6118ee816118d3565b82525050565b600060208201905061190960008301846118e5565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119588261190f565b810181811067ffffffffffffffff8211171561197757611976611920565b5b80604052505050565b600061198a6116ba565b9050611996828261194f565b919050565b600067ffffffffffffffff8211156119b6576119b5611920565b5b602082029050602081019050919050565b600080fd5b600080fd5b6119da81611861565b81146119e557600080fd5b50565b6000813590506119f7816119d1565b92915050565b600080fd5b600067ffffffffffffffff821115611a1d57611a1c611920565b5b611a268261190f565b9050602081019050919050565b82818337600083830152505050565b6000611a55611a5084611a02565b611980565b905082815260208101848484011115611a7157611a706119fd565b5b611a7c848285611a33565b509392505050565b600082601f830112611a9957611a98611762565b5b8135611aa9848260208601611a42565b91505092915050565b60008115159050919050565b611ac781611ab2565b8114611ad257600080fd5b50565b600081359050611ae481611abe565b92915050565b600060608284031215611b0057611aff6119c7565b5b611b0a6060611980565b90506000611b1a848285016119e8565b600083015250602082013567ffffffffffffffff811115611b3e57611b3d6119cc565b5b611b4a84828501611a84565b6020830152506040611b5e84828501611ad5565b60408301525092915050565b6000611b7d611b788461199b565b611980565b90508083825260208201905060208402830185811115611ba057611b9f61176c565b5b835b81811015611be757803567ffffffffffffffff811115611bc557611bc4611762565b5b808601611bd28982611aea565b85526020850194505050602081019050611ba2565b5050509392505050565b600082601f830112611c0657611c05611762565b5b8135611c16848260208601611b6a565b91505092915050565b600060208284031215611c3557611c346116c4565b5b600082013567ffffffffffffffff811115611c5357611c526116c9565b5b611c5f84828501611bf1565b91505092915050565b60008083601f840112611c7e57611c7d611762565b5b8235905067ffffffffffffffff811115611c9b57611c9a611767565b5b602083019150836001820283011115611cb757611cb661176c565b5b9250929050565b600080600060408486031215611cd757611cd66116c4565b5b600084013567ffffffffffffffff811115611cf557611cf46116c9565b5b611d0186828701611bf1565b935050602084013567ffffffffffffffff811115611d2257611d216116c9565b5b611d2e86828701611c68565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d74578082015181840152602081019050611d59565b83811115611d83576000848401525b50505050565b6000611d9482611d3a565b611d9e8185611d45565b9350611dae818560208601611d56565b611db78161190f565b840191505092915050565b60006020820190508181036000830152611ddc8184611d89565b905092915050565b600081519050611df381611700565b92915050565b600060208284031215611e0f57611e0e6116c4565b5b6000611e1d84828501611de4565b91505092915050565b7f556e7472757374656420666c6173686c6f616e206c656e646572000000000000600082015250565b6000611e5c601a83611d45565b9150611e6782611e26565b602082019050919050565b60006020820190508181036000830152611e8b81611e4f565b9050919050565b600060608284031215611ea857611ea76119c7565b5b611eb26060611980565b90506000611ec28482850161174d565b6000830152506020611ed684828501611ad5565b602083015250604082013567ffffffffffffffff811115611efa57611ef96119cc565b5b611f0684828501611bf1565b60408301525092915050565b600060208284031215611f2857611f276116c4565b5b600082013567ffffffffffffffff811115611f4657611f456116c9565b5b611f5284828501611e92565b91505092915050565b611f64816116ee565b82525050565b6000602082019050611f7f6000830184611f5b565b92915050565b600081519050611f9481611736565b92915050565b600060208284031215611fb057611faf6116c4565b5b6000611fbe84828501611f85565b91505092915050565b7f466c6173686c6f616e20696e636f6e73697374656e6379000000000000000000600082015250565b6000611ffd601783611d45565b915061200882611fc7565b602082019050919050565b6000602082019050818103600083015261202c81611ff0565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61206881611861565b82525050565b600081519050919050565b600082825260208201905092915050565b60006120958261206e565b61209f8185612079565b93506120af818560208601611d56565b6120b88161190f565b840191505092915050565b6120cc81611ab2565b82525050565b60006060830160008301516120ea600086018261205f565b5060208301518482036020860152612102828261208a565b915050604083015161211760408601826120c3565b508091505092915050565b600061212e83836120d2565b905092915050565b6000602082019050919050565b600061214e82612033565b612158818561203e565b93508360208202850161216a8561204f565b8060005b858110156121a657848403895281516121878582612122565b945061219283612136565b925060208a0199505060018101905061216e565b50829750879550505050505092915050565b600060208201905081810360008301526121d28184612143565b905092915050565b600082825260208201905092915050565b60006121f68261206e565b61220081856121da565b9350612210818560208601611d56565b6122198161190f565b840191505092915050565b60006040820190506122396000830185611f5b565b818103602083015261224b81846121eb565b90509392505050565b600081519050612263816119d1565b92915050565b60006020828403121561227f5761227e6116c4565b5b600061228d84828501612254565b91505092915050565b7f496e73756666696369656e742066756e647320666f72207061796261636b0000600082015250565b60006122cc601e83611d45565b91506122d782612296565b602082019050919050565b600060208201905081810360008301526122fb816122bf565b9050919050565b7f4f704578656375746f723a2043616c6c657220666f7262696464656e00000000600082015250565b6000612338601c83611d45565b915061234382612302565b602082019050919050565b600060208201905081810360008301526123678161232b565b9050919050565b600061237a8385611d45565b9350612387838584611a33565b6123908361190f565b840190509392505050565b600060208201905081810360008301526123b681848661236e565b90509392505050565b600067ffffffffffffffff8211156123da576123d9611920565b5b602082029050602081019050919050565b60006123fe6123f9846123bf565b611980565b905080838252602082019050602084028301858111156124215761242061176c565b5b835b8181101561244a57806124368882612254565b845260208401935050602081019050612423565b5050509392505050565b600082601f83011261246957612468611762565b5b81516124798482602086016123eb565b91505092915050565b600067ffffffffffffffff82111561249d5761249c611920565b5b602082029050602081019050919050565b6000815190506124bd81611abe565b92915050565b60006124d66124d184612482565b611980565b905080838252602082019050602084028301858111156124f9576124f861176c565b5b835b81811015612522578061250e88826124ae565b8452602084019350506020810190506124fb565b5050509392505050565b600082601f83011261254157612540611762565b5b81516125518482602086016124c3565b91505092915050565b60008060408385031215612571576125706116c4565b5b600083015167ffffffffffffffff81111561258f5761258e6116c9565b5b61259b85828601612454565b925050602083015167ffffffffffffffff8111156125bc576125bb6116c9565b5b6125c88582860161252c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061260a838361205f565b60208301905092915050565b6000602082019050919050565b600061262e826125d2565b61263881856125dd565b9350612643836125ee565b8060005b8381101561267457815161265b88826125fe565b975061266683612616565b925050600181019050612647565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006126b983836120c3565b60208301905092915050565b6000602082019050919050565b60006126dd82612681565b6126e7818561268c565b93506126f28361269d565b8060005b8381101561272357815161270a88826126ad565b9750612715836126c5565b9250506001810190506126f6565b5085935050505092915050565b6000604082019050818103600083015261274a8185612623565b9050818103602083015261275e81846126d2565b90509392505050565b600081905092915050565b600061277e8385612767565b935061278b838584611a33565b82840190509392505050565b60006127a4828486612772565b91508190509392505050565b6127b98161172c565b82525050565b60006040820190506127d46000830185611f5b565b6127e160208301846127b0565b9392505050565b6000602082840312156127fe576127fd6116c4565b5b600061280c848285016124ae565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61284d81611ab2565b82525050565b6000604082019050612868600083018561186b565b6128756020830184612844565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128b68261172c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128e8576128e761287c565b5b600182019050919050565b60006128fe8261172c565b91506129098361172c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561293e5761293d61287c565b5b828201905092915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b600061297f601b83611d45565b915061298a82612949565b602082019050919050565b600060208201905081810360008301526129ae81612972565b9050919050565b6000819050919050565b600060ff82169050919050565b60006129e76129e26129dd846129b5565b611895565b6129bf565b9050919050565b6129f7816129cc565b82525050565b6000604082019050612a126000830185611f5b565b612a1f60208301846129ee565b9392505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612a82602a83611d45565b9150612a8d82612a26565b604082019050919050565b60006020820190508181036000830152612ab181612a75565b9050919050565b7f4f704578656375746f723a20696c6c6567616c2063616c6c0000000000000000600082015250565b6000612aee601883611d45565b9150612af982612ab8565b602082019050919050565b60006020820190508181036000830152612b1d81612ae1565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000612b80602683611d45565b9150612b8b82612b24565b604082019050919050565b60006020820190508181036000830152612baf81612b73565b9050919050565b600081905092915050565b6000612bcc8261206e565b612bd68185612bb6565b9350612be6818560208601611d56565b80840191505092915050565b6000612bfe8284612bc1565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c3f601d83611d45565b9150612c4a82612c09565b602082019050919050565b60006020820190508181036000830152612c6e81612c32565b905091905056fe4f704578656375746f723a206c6f772d6c6576656c2064656c656761746563616c6c206661696c6564a2646970667358221220915336b861b9d262f0cbd82fcc67281dc1f2414aafb8f8774bed2a4f402f0b6464736f6c634300080f0033","deployedBytecode":"","abi":[{"inputs":[{"internalType":"contract ServiceRegistry","name":"_registry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"string","name":"name","type":"string"},{"components":[{"internalType":"bytes32","name":"targetHash","type":"bytes32"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bool","name":"skipped","type":"bool"}],"indexed":false,"internalType":"struct Call[]","name":"calls","type":"tuple[]"}],"name":"Operation","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"targetHash","type":"bytes32"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bool","name":"skipped","type":"bool"}],"internalType":"struct Call[]","name":"calls","type":"tuple[]"}],"name":"callbackAggregate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"targetHash","type":"bytes32"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bool","name":"skipped","type":"bool"}],"internalType":"struct Call[]","name":"calls","type":"tuple[]"},{"internalType":"string","name":"operationName","type":"string"}],"name":"executeOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onFlashLoan","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"registry","outputs":[{"internalType":"contract ServiceRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}